"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const plugins_1 = require("hardhat/plugins");
const ora_1 = __importDefault(require("ora"));
const api_1 = require("../api");
const testgen_1 = require("../testgen");
const auth_1 = require("../util/auth");
const retry_1 = require("../util/retry");
const util_1 = require("../util/util");
const scope_1 = require("./scope");
(0, scope_1.maybeScope)()
    .task((0, scope_1.scopedName)("push"), "Upload source code and deployments for use in the workbench")
    .addFlag("dry", "")
    .addFlag("force", "Force update when the code has not changed.")
    .addOptionalParam("team", "Override the team. Expects the slug associated with the team.")
    .setAction(async (params, hre) => {
    const { dry = false, force, team } = params;
    await (0, util_1.checkVersion)();
    const spinner = (0, ora_1.default)({ color: "white" });
    if (!dry) {
        await hre.run("compile", { quiet: true });
        let needsCleanRecompile = true;
        try {
            const files = node_fs_1.default.readdirSync(node_path_1.default.join(hre.config.paths.root, "artifacts/build-info"));
            needsCleanRecompile = files.length > 1;
        }
        catch (_e) { }
        if (needsCleanRecompile) {
            await hre.run("clean");
            await hre.run("compile", { quiet: true, force: true });
        }
    }
    else {
        await hre.run("compile", { quiet: true });
    }
    try {
        spinner.start();
        const config = hre.config.statespace;
        if (team) {
            config.team = team;
        }
        const explore = await new api_1.Api(config).init();
        const res = await (0, util_1.withAuth)(async () => (0, retry_1.retryNetworkErrors)(() => explore.requestExploration(false, force), spinner), creds => explore.setAuth(creds), spinner);
        if (res?.error) {
            spinner.fail(res.message);
        }
        else {
            spinner.succeed("Success");
        }
        return;
    }
    catch (e) {
        spinner.stopAndPersist();
        if (e instanceof testgen_1.TestGenError) {
            throw new plugins_1.HardhatPluginError("testgen", e.message, e);
        }
        if (e instanceof testgen_1.TestGenFixtureError) {
            throw new plugins_1.HardhatPluginError("testgen", e.message, e.sourceError);
        }
        if (e instanceof testgen_1.TestGenAuthRetryError) {
            try {
                await (0, auth_1.clearCredentials)();
            }
            catch (_e) { }
            throw new plugins_1.HardhatPluginError("testgen", e.message, e);
        }
        throw new plugins_1.HardhatPluginError("testgen", `${e?.toString()}\n\nThis is an unexpected error - please contact support@state.space`, e);
    }
});
//# sourceMappingURL=push.js.map