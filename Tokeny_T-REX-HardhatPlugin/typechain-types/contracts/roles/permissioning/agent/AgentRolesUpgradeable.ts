/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface AgentRolesUpgradeableInterface extends utils.Interface {
  functions: {
    "addAgentAdmin(address)": FunctionFragment;
    "addComplianceAgent(address)": FunctionFragment;
    "addFreezer(address)": FunctionFragment;
    "addRecoveryAgent(address)": FunctionFragment;
    "addSupplyModifier(address)": FunctionFragment;
    "addTransferManager(address)": FunctionFragment;
    "addWhiteListManager(address)": FunctionFragment;
    "isAgentAdmin(address)": FunctionFragment;
    "isComplianceAgent(address)": FunctionFragment;
    "isFreezer(address)": FunctionFragment;
    "isRecoveryAgent(address)": FunctionFragment;
    "isSupplyModifier(address)": FunctionFragment;
    "isTransferManager(address)": FunctionFragment;
    "isWhiteListManager(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAgentAdmin(address)": FunctionFragment;
    "removeComplianceAgent(address)": FunctionFragment;
    "removeFreezer(address)": FunctionFragment;
    "removeRecoveryAgent(address)": FunctionFragment;
    "removeSupplyModifier(address)": FunctionFragment;
    "removeTransferManager(address)": FunctionFragment;
    "removeWhiteListManager(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAgentAdmin"
      | "addComplianceAgent"
      | "addFreezer"
      | "addRecoveryAgent"
      | "addSupplyModifier"
      | "addTransferManager"
      | "addWhiteListManager"
      | "isAgentAdmin"
      | "isComplianceAgent"
      | "isFreezer"
      | "isRecoveryAgent"
      | "isSupplyModifier"
      | "isTransferManager"
      | "isWhiteListManager"
      | "owner"
      | "removeAgentAdmin"
      | "removeComplianceAgent"
      | "removeFreezer"
      | "removeRecoveryAgent"
      | "removeSupplyModifier"
      | "removeTransferManager"
      | "removeWhiteListManager"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAgentAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addComplianceAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFreezer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRecoveryAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupplyModifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTransferManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhiteListManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgentAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isComplianceAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFreezer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRecoveryAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupplyModifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhiteListManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAgentAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeComplianceAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFreezer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRecoveryAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupplyModifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTransferManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhiteListManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAgentAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addComplianceAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFreezer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRecoveryAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupplyModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTransferManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhiteListManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAgentAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComplianceAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFreezer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRecoveryAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupplyModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhiteListManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAgentAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeComplianceAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFreezer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRecoveryAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupplyModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTransferManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhiteListManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdded(address,string)": EventFragment;
    "RoleRemoved(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRemoved"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAddedEventObject {
  _agent: string;
  _role: string;
}
export type RoleAddedEvent = TypedEvent<[string, string], RoleAddedEventObject>;

export type RoleAddedEventFilter = TypedEventFilter<RoleAddedEvent>;

export interface RoleRemovedEventObject {
  _agent: string;
  _role: string;
}
export type RoleRemovedEvent = TypedEvent<
  [string, string],
  RoleRemovedEventObject
>;

export type RoleRemovedEventFilter = TypedEventFilter<RoleRemovedEvent>;

export interface AgentRolesUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgentRolesUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAgentAdmin(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addComplianceAgent(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFreezer(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRecoveryAgent(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSupplyModifier(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTransferManager(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWhiteListManager(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAgentAdmin(
    _agent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isComplianceAgent(
    _agent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFreezer(
    _agent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRecoveryAgent(
    _agent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupplyModifier(
    _agent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTransferManager(
    _agent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhiteListManager(
    _agent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeAgentAdmin(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeComplianceAgent(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFreezer(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRecoveryAgent(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSupplyModifier(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTransferManager(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWhiteListManager(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoleAdded(address,string)"(
      _agent?: PromiseOrValue<string> | null,
      _role?: null
    ): RoleAddedEventFilter;
    RoleAdded(
      _agent?: PromiseOrValue<string> | null,
      _role?: null
    ): RoleAddedEventFilter;

    "RoleRemoved(address,string)"(
      _agent?: PromiseOrValue<string> | null,
      _role?: null
    ): RoleRemovedEventFilter;
    RoleRemoved(
      _agent?: PromiseOrValue<string> | null,
      _role?: null
    ): RoleRemovedEventFilter;
  };

  estimateGas: {
    addAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAgentAdmin(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeComplianceAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFreezer(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRecoveryAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSupplyModifier(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTransferManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWhiteListManager(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
