/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ITrustedIssuersRegistryLegacy,
  ITrustedIssuersRegistryLegacyInterface,
} from "../../../../../contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol/ITrustedIssuersRegistryLegacy";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IClaimIssuerLegacy",
        name: "trustedIssuer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "claimTopics",
        type: "uint256[]",
      },
    ],
    name: "ClaimTopicsUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IClaimIssuerLegacy",
        name: "trustedIssuer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "claimTopics",
        type: "uint256[]",
      },
    ],
    name: "TrustedIssuerAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IClaimIssuerLegacy",
        name: "trustedIssuer",
        type: "address",
      },
    ],
    name: "TrustedIssuerRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IClaimIssuerLegacy",
        name: "_trustedIssuer",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_claimTopics",
        type: "uint256[]",
      },
    ],
    name: "addTrustedIssuer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IClaimIssuerLegacy",
        name: "_trustedIssuer",
        type: "address",
      },
    ],
    name: "getTrustedIssuerClaimTopics",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTrustedIssuers",
    outputs: [
      {
        internalType: "contract IClaimIssuerLegacy[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_issuer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_claimTopic",
        type: "uint256",
      },
    ],
    name: "hasClaimTopic",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_issuer",
        type: "address",
      },
    ],
    name: "isTrustedIssuer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IClaimIssuerLegacy",
        name: "_trustedIssuer",
        type: "address",
      },
    ],
    name: "removeTrustedIssuer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnershipOnIssuersRegistryContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IClaimIssuerLegacy",
        name: "_trustedIssuer",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_claimTopics",
        type: "uint256[]",
      },
    ],
    name: "updateIssuerClaimTopics",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ITrustedIssuersRegistryLegacy__factory {
  static readonly abi = _abi;
  static createInterface(): ITrustedIssuersRegistryLegacyInterface {
    return new utils.Interface(_abi) as ITrustedIssuersRegistryLegacyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITrustedIssuersRegistryLegacy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ITrustedIssuersRegistryLegacy;
  }
}
