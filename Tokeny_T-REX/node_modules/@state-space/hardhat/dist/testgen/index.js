"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotRestorer = exports.normalizeProvider = exports.SequenceEntryBuilder = exports.authenticate = void 0;
exports.assertOutputType = assertOutputType;
exports.isABIConstraintAddress = isABIConstraintAddress;
exports.isABIConstraintArrayDynamic = isABIConstraintArrayDynamic;
exports.isABIConstraintStruct = isABIConstraintStruct;
exports.runFixtureFn = runFixtureFn;
exports.cartesianProduct = cartesianProduct;
exports.normalizeSequences = normalizeSequences;
exports.takeSnapshot = takeSnapshot;
exports.isEthersAccount = isEthersAccount;
exports.isArray = isArray;
exports.extractAddress = extractAddress;
const util = __importStar(require("node:util"));
__exportStar(require("./types"), exports);
var auth_1 = require("../util/auth");
Object.defineProperty(exports, "authenticate", { enumerable: true, get: function () { return auth_1.authenticate; } });
class SequenceEntryBuilder {
    abi;
    _to;
    _from;
    _constraints;
    constructor(abi, _to, _from, _constraints) {
        this.abi = abi;
        this._to = _to;
        this._from = _from;
        this._constraints = _constraints;
    }
    from(...accountIndexOrAddress) {
        this._from = accountIndexOrAddress;
        return this;
    }
    to(...contract) {
        this._to = contract;
        return this;
    }
    constrain(constraints) {
        this._constraints = constraints;
        return this;
    }
    constraints(constraints) {
        this._constraints = constraints;
        return this;
    }
}
exports.SequenceEntryBuilder = SequenceEntryBuilder;
const normalizeProvider = (someProvider) => {
    if ("send" in someProvider) {
        return {
            request: async ({ method, params = [] }) => {
                return await someProvider.send(method, params);
            },
        };
    }
    else if ("request" in someProvider) {
        return someProvider;
    }
    else {
        throw new Error(`Unable to normalize provider that doesn't implement either 'send' or 'request'`);
    }
};
exports.normalizeProvider = normalizeProvider;
function assertOutputType(outputType) {
    throw new Error(`Invalid outputType specified: "${outputType}"`);
}
function isABIConstraintAddress(c) {
    if (typeof c == "object" && "addresses" in c)
        return true;
    if (typeof c == "object" && Array.isArray(c)) {
        for (const item of c) {
            if (typeof item != "string" || !item.startsWith("0x")) {
                return false;
            }
        }
        return true;
    }
    if (typeof c == "object" && "getAddress" in c && typeof c.getAddress == "function") {
        return true;
    }
    if (typeof c == "string" && c.startsWith("0x"))
        return true;
    return false;
}
function isABIConstraintArrayDynamic(c) {
    return typeof c == "object" && ("lengths" in c || "item" in c);
}
function isABIConstraintStruct(c) {
    if (typeof c != "object")
        return false;
    for (const [, innerConstraint] of Object.entries(c)) {
        if (Array.isArray(innerConstraint) || innerConstraint === undefined) {
            return false;
        }
        if (!isABIConstraintArrayDynamic(innerConstraint) &&
            !isABIConstraintStruct(innerConstraint) &&
            !isABIConstraintAddress(innerConstraint)) {
            return false;
        }
    }
    return true;
}
async function runFixtureFn(fn) {
    const hre = await Promise.resolve().then(() => __importStar(require("hardhat")));
    const provider = hre.network.provider;
    const preStateSnapshot = await takeSnapshot();
    const startBlock = (await provider.request({
        method: "eth_blockNumber",
    }));
    const fnResult = await fn();
    const endBlock = (await provider.request({
        method: "eth_blockNumber",
    }));
    const blocks = [];
    for (let blockNumber = Number(startBlock) + 1; blockNumber <= Number(endBlock); blockNumber++) {
        const block = (await provider.request({
            method: "eth_getBlockByNumber",
            params: ["0x" + blockNumber.toString(16), true],
        }));
        const transactions = block.transactions;
        if (!transactions.length) {
            continue;
        }
        blocks.push({
            ...block,
            transactions: transactions.map(t => ({
                ...t,
                index: 0,
            })),
            index: 0,
        });
    }
    for (const [index, block] of blocks.entries()) {
        block.index = index;
        for (const [index, transaction] of block.transactions.entries()) {
            transaction.index = index;
        }
    }
    return [fnResult, blocks, preStateSnapshot];
}
// https://stackoverflow.com/a/12628791
function cartesianProduct(arr) {
    return arr.reduce((a, b) => a.map(x => b.map(y => x.concat([y]))).reduce((a, b) => a.concat(b), []), [[]]);
}
function normalizeSequences(sequences) {
    return (sequences?.map(sequence => sequence.map(seqEntryOrEntries => (Array.isArray(seqEntryOrEntries) ? seqEntryOrEntries : [seqEntryOrEntries]))) || []);
}
async function takeSnapshot() {
    const hre = await Promise.resolve().then(() => __importStar(require("hardhat")));
    const snapshot = (await hre.network.provider.request({
        method: "evm_snapshot",
    }));
    return new SnapshotRestorer(snapshot);
}
class SnapshotRestorer {
    snapshot;
    constructor(snapshot) {
        this.snapshot = snapshot;
    }
    async restore() {
        const hre = await Promise.resolve().then(() => __importStar(require("hardhat")));
        await hre.network.provider.request({
            method: "evm_revert",
            params: [this.snapshot],
        });
    }
}
exports.SnapshotRestorer = SnapshotRestorer;
function isEthersAccount(address) {
    return typeof address == "object" && "getAddress" in address && typeof address.getAddress == "function";
}
function isArray(a) {
    return typeof a == "object" && Array.isArray(a);
}
async function extractAddress(address) {
    if (typeof address === "string") {
        return address;
    }
    if (isEthersAccount(address)) {
        return await address.getAddress();
    }
    if ("address" in address && typeof address.address == "string") {
        return address.address;
    }
    throw new Error(util.inspect(address, {
        depth: 2,
        maxArrayLength: 3,
        maxStringLength: 24,
    }) + " is not an address");
}
//# sourceMappingURL=index.js.map