"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appConfig = exports.getSolcOutputs = void 0;
exports.defaultProjectName = defaultProjectName;
exports.env = env;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const config_1 = require("hardhat/config");
const testgen_1 = require("./testgen");
(0, config_1.extendConfig)((config, userConfig) => {
    config.statespace = {
        team: userConfig.statespace?.team || "",
        project: userConfig.statespace?.project || defaultProjectName(),
        deployments: userConfig.statespace?.deployments || {},
        artifacts: userConfig.statespace?.artifacts || [],
    };
});
const getSolcOutputs = async () => {
    const hre = await Promise.resolve().then(() => __importStar(require("hardhat")));
    const solcOutputs = [];
    for (const buildInfoPath of await hre.artifacts.getBuildInfoPaths()) {
        const solcOutput = JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(buildInfoPath)).toString("utf8"));
        solcOutputs.push(solcOutput);
    }
    const artifacts = [];
    for (const artifact of hre.config.statespace.artifacts) {
        switch (typeof artifact) {
            case "string":
                if (!fs_1.default.existsSync(artifact)) {
                    throw new testgen_1.TestGenError(`Failed to read artifact at file path '${artifact.slice(0, 1e4)}': file does not exist`);
                }
                try {
                    artifacts.push(JSON.parse(fs_1.default.readFileSync(artifact).toString()));
                }
                catch (e) {
                    throw new testgen_1.TestGenError(`Failed to read artifact at file path '${artifact.slice(0, 1e4)}': expected JSON - ${e}`);
                }
                break;
            case "object":
                artifacts.push(artifact);
                break;
            default:
                throw new testgen_1.TestGenError(`Unexpected value for artifact: ${artifact}. Must be a JSON file path or object.`);
        }
    }
    for (const artifact of artifacts) {
        if ("_format" in artifact) {
            switch (artifact._format) {
                case "hh-sol-build-info-1":
                    solcOutputs.push(artifact);
                    continue;
                case "hh-sol-artifact-1":
                    const path = artifact.sourceName;
                    const name = artifact.contractName;
                    const solcOutput = {
                        _format: "ssx_raw",
                        input: {},
                        output: {
                            errors: [],
                            sources: {},
                            contracts: {
                                [path ?? ""]: {
                                    [name ?? ""]: artifact,
                                },
                            },
                        },
                    };
                    solcOutputs.push(solcOutput);
                    continue;
            }
        }
        if ("metadata" in artifact) {
            let metadata = undefined;
            if (typeof artifact.metadata == "string") {
                try {
                    metadata = JSON.parse(artifact.metadata);
                }
                catch (e) { }
            }
            else if (typeof artifact.metadata == "object") {
                metadata = artifact.metadata;
            }
            if (metadata) {
                if (metadata?.settings?.compilationTarget) {
                }
            }
        }
    }
    return solcOutputs;
};
exports.getSolcOutputs = getSolcOutputs;
function defaultProjectName() {
    return path_1.default.basename(path_1.default.resolve(process.cwd()));
}
function env(name, defaultValue = "") {
    return process.env[name] || defaultValue;
}
const appConfig = () => {
    switch (env("ENV", env("env"))) {
        case "local":
            return {
                "api": "http://localhost:4001/graphql",
                "auth0.domain": "state-space-dev.us.auth0.com",
                "auth0.audience": "https://state.space/api",
                "auth0.clientId": "XIUasrskieitJ2P83aQjPJQxwPwO2BT1",
                credentialsPath: "credentials.local",
            };
        case "dev":
            return {
                "api": "https://gateway.dev.state.space/graphql",
                "auth0.domain": "state-space-dev.us.auth0.com",
                "auth0.audience": "https://state.space/api",
                "auth0.clientId": "XIUasrskieitJ2P83aQjPJQxwPwO2BT1",
                credentialsPath: "credentials.local",
            };
        case "staging":
            return {
                "api": "https://gateway.staging.state.space/graphql",
                "auth0.domain": "auth.state.space",
                "auth0.audience": "https://app.state.space",
                "auth0.clientId": "LikXfqHYC7Up4ZpxWSNQcJqBaYxmchhH",
                credentialsPath: "credentials.staging",
            };
        default:
            return {
                "api": "https://gateway.state.space/graphql",
                "auth0.domain": "auth.state.space",
                "auth0.audience": "https://app.state.space",
                "auth0.clientId": "cZWrQ27NDi6uI7PkGDnKEvJf24YBmqZq",
                credentialsPath: "credentials",
            };
    }
};
exports.appConfig = appConfig;
//# sourceMappingURL=config.js.map