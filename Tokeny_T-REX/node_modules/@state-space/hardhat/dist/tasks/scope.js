"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.maybeScope = maybeScope;
exports.scopedName = scopedName;
const hardhatConfig = __importStar(require("hardhat/config"));
let StateSpaceScope;
function maybeScope() {
    if (!!StateSpaceScope) {
        return StateSpaceScope;
    }
    else if (hardhatConfig.scope != null) {
        StateSpaceScope = hardhatConfig.scope("state-space");
        return StateSpaceScope;
    }
    return {
        task: hardhatConfig.task,
        subtask: hardhatConfig.subtask,
    };
}
function scopedName(name) {
    if (hardhatConfig.scope != null) {
        return name;
    }
    return `state-space-${name}`;
}
if (hardhatConfig.scope == null) {
    hardhatConfig
        .task("state-space")
        .addPositionalParam("task", "One of 'push' or 'explore'")
        .addFlag("dry", "")
        .addFlag("force", "Force update when the code has not changed.")
        .addOptionalParam("team", "Override the team. Expects the slug associated with the team.")
        .setAction(async ({ task, ...rest }) => {
        const hre = await Promise.resolve().then(() => __importStar(require("hardhat")));
        return await hre.run(scopedName(task), { ...rest }, {});
    });
}
//# sourceMappingURL=scope.js.map