{
  "version": "3.4",
  "log": [
    {
      "@onchain-id/solidity/contracts/ClaimIssuer.sol:ClaimIssuer": {
        "src": "@onchain-id/solidity/contracts/ClaimIssuer.sol:7",
        "version": {
          "withMetadata": "c17dd8f0df87732dbdb725b88508a6adf00e123b7bcb5c72514e6a7901463c06",
          "withoutMetadata": "b3e1d21241db61658d5631d78f8c1b5cae8df88a2da88b75654b455cee1a8ae8",
          "linkedWithoutMetadata": "b3e1d21241db61658d5631d78f8c1b5cae8df88a2da88b75654b455cee1a8ae8"
        },
        "inherit": [
          "@onchain-id/solidity/contracts/Identity.sol:Identity",
          "@onchain-id/solidity/contracts/version/Version.sol:Version",
          "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol:IClaimIssuer",
          "@onchain-id/solidity/contracts/interface/IIdentity.sol:IIdentity",
          "@onchain-id/solidity/contracts/interface/IERC735.sol:IERC735",
          "@onchain-id/solidity/contracts/interface/IERC734.sol:IERC734",
          "@onchain-id/solidity/contracts/storage/Storage.sol:Storage",
          "@onchain-id/solidity/contracts/storage/Structs.sol:Structs"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "revokeClaimBySignature(bytes)",
          "revokeClaim(bytes32,address)",
          "isClaimValid(address,uint256,bytes,bytes)",
          "isClaimRevoked(bytes)",
          "getRecoveredAddress(bytes,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClaimIssuer",
            "src": "@onchain-id/solidity/contracts/ClaimIssuer.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_executionNonce",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:7"
            },
            {
              "label": "_keys",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(Key)2050_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:10"
            },
            {
              "label": "_keysByPurpose",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:16"
            },
            {
              "label": "_executions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Execution)2061_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:19"
            },
            {
              "label": "_claims",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(Claim)2074_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:22"
            },
            {
              "label": "_claimsByTopic",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:25"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:28"
            },
            {
              "label": "_canInteract",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:31"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:37"
            },
            {
              "label": "revokedClaims",
              "offset": 0,
              "slot": "56",
              "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
              "contract": "ClaimIssuer",
              "src": "@onchain-id/solidity/contracts/ClaimIssuer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_memory_ptr": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Claim)2074_storage)": {
              "label": "mapping(bytes32 => struct Structs.Claim)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Key)2050_storage)": {
              "label": "mapping(bytes32 => struct Structs.Key)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes_memory_ptr,t_bool)": {
              "label": "mapping(bytes => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(uint256 => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Execution)2061_storage)": {
              "label": "mapping(uint256 => struct Structs.Execution)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Claim)2074_storage": {
              "label": "struct Structs.Claim",
              "members": [
                {
                  "label": "topic",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "scheme",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "issuer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "signature",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "uri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Execution)2061_storage": {
              "label": "struct Structs.Execution",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "approved",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Key)2050_storage": {
              "label": "struct Structs.Key",
              "members": [
                {
                  "label": "purposes",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "keyType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/Identity.sol:Identity": {
        "src": "@onchain-id/solidity/contracts/Identity.sol:15",
        "version": {
          "withMetadata": "3b98eabc655beacdac27f03112f4f05a237d571fa3cf4b030007f4051c8a90bf",
          "withoutMetadata": "347cb547de913d4a32abe720c87b7ae0c58a1877f02fafe38441d3d14106d41e",
          "linkedWithoutMetadata": "347cb547de913d4a32abe720c87b7ae0c58a1877f02fafe38441d3d14106d41e"
        },
        "inherit": [
          "@onchain-id/solidity/contracts/version/Version.sol:Version",
          "@onchain-id/solidity/contracts/interface/IIdentity.sol:IIdentity",
          "@onchain-id/solidity/contracts/interface/IERC735.sol:IERC735",
          "@onchain-id/solidity/contracts/interface/IERC734.sol:IERC734",
          "@onchain-id/solidity/contracts/storage/Storage.sol:Storage",
          "@onchain-id/solidity/contracts/storage/Structs.sol:Structs"
        ],
        "libraries": [],
        "methods": [
          "(address,bool)",
          "initialize(address)",
          "execute(address,uint256,bytes)",
          "getKey(bytes32)",
          "getKeyPurposes(bytes32)",
          "getKeysByPurpose(uint256)",
          "getClaimIdsByTopic(uint256)",
          "addKey(bytes32,uint256,uint256)",
          "approve(uint256,bool)",
          "removeKey(bytes32,uint256)",
          "addClaim(uint256,uint256,address,bytes,bytes,string)",
          "removeClaim(bytes32)",
          "getClaim(bytes32)",
          "keyHasPurpose(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "@onchain-id/solidity/contracts/Identity.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_executionNonce",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:7"
            },
            {
              "label": "_keys",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(Key)2050_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:10"
            },
            {
              "label": "_keysByPurpose",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:16"
            },
            {
              "label": "_executions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Execution)2061_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:19"
            },
            {
              "label": "_claims",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(Claim)2074_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:22"
            },
            {
              "label": "_claimsByTopic",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:25"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:28"
            },
            {
              "label": "_canInteract",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:31"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Claim)2074_storage)": {
              "label": "mapping(bytes32 => struct Structs.Claim)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Key)2050_storage)": {
              "label": "mapping(bytes32 => struct Structs.Key)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(uint256 => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Execution)2061_storage)": {
              "label": "mapping(uint256 => struct Structs.Execution)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Claim)2074_storage": {
              "label": "struct Structs.Claim",
              "members": [
                {
                  "label": "topic",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "scheme",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "issuer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "signature",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "uri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Execution)2061_storage": {
              "label": "struct Structs.Execution",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "approved",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Key)2050_storage": {
              "label": "struct Structs.Key",
              "members": [
                {
                  "label": "purposes",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "keyType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/factory/IIdFactory.sol:IIdFactory": {
        "src": "@onchain-id/solidity/contracts/factory/IIdFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createIdentity(address,string)",
          "createIdentityWithManagementKeys(address,string,bytes32[])",
          "createTokenIdentity(address,address,string)",
          "linkWallet(address)",
          "unlinkWallet(address)",
          "addTokenFactory(address)",
          "removeTokenFactory(address)",
          "getIdentity(address)",
          "getWallets(address)",
          "getToken(address)",
          "isTokenFactory(address)",
          "isSaltTaken(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol:IClaimIssuer": {
        "src": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol:6",
        "inherit": [
          "@onchain-id/solidity/contracts/interface/IIdentity.sol:IIdentity",
          "@onchain-id/solidity/contracts/interface/IERC735.sol:IERC735",
          "@onchain-id/solidity/contracts/interface/IERC734.sol:IERC734"
        ],
        "libraries": [],
        "methods": [
          "revokeClaim(bytes32,address)",
          "revokeClaimBySignature(bytes)",
          "isClaimRevoked(bytes)",
          "isClaimValid(address,uint256,bytes,bytes)",
          "getRecoveredAddress(bytes,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/interface/IERC734.sol:IERC734": {
        "src": "@onchain-id/solidity/contracts/interface/IERC734.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addKey(bytes32,uint256,uint256)",
          "approve(uint256,bool)",
          "removeKey(bytes32,uint256)",
          "execute(address,uint256,bytes)",
          "getKey(bytes32)",
          "getKeyPurposes(bytes32)",
          "getKeysByPurpose(uint256)",
          "keyHasPurpose(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/interface/IERC735.sol:IERC735": {
        "src": "@onchain-id/solidity/contracts/interface/IERC735.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addClaim(uint256,uint256,address,bytes,bytes,string)",
          "removeClaim(bytes32)",
          "getClaim(bytes32)",
          "getClaimIdsByTopic(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/interface/IIdentity.sol:IIdentity": {
        "src": "@onchain-id/solidity/contracts/interface/IIdentity.sol:8",
        "inherit": [
          "@onchain-id/solidity/contracts/interface/IERC735.sol:IERC735",
          "@onchain-id/solidity/contracts/interface/IERC734.sol:IERC734"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/interface/IImplementationAuthority.sol:IImplementationAuthority": {
        "src": "@onchain-id/solidity/contracts/interface/IImplementationAuthority.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateImplementation(address)",
          "getImplementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/proxy/ImplementationAuthority.sol:ImplementationAuthority": {
        "src": "@onchain-id/solidity/contracts/proxy/ImplementationAuthority.sol:8",
        "version": {
          "withMetadata": "d34f28abc17acf5f76eb645aa223a9e36a5c4985c3293bf407d24a4294a2ebc9",
          "withoutMetadata": "791d479114e5e672fdf578180320683437e03d77cbbf84cb21e69e45164c1df4",
          "linkedWithoutMetadata": "791d479114e5e672fdf578180320683437e03d77cbbf84cb21e69e45164c1df4"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@onchain-id/solidity/contracts/interface/IImplementationAuthority.sol:IImplementationAuthority"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "updateImplementation(address)",
          "getImplementation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ImplementationAuthority",
            "src": "@onchain-id/solidity/contracts/proxy/ImplementationAuthority.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ImplementationAuthority",
              "src": "@onchain-id/solidity/contracts/proxy/ImplementationAuthority.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/storage/Storage.sol:Storage": {
        "src": "@onchain-id/solidity/contracts/storage/Storage.sol:5",
        "version": {
          "withMetadata": "046654446a3e06342d9933a5c64fbece35e8da4604e16089e50065a0912acfe2",
          "withoutMetadata": "f65d9910ddbc40d96c4814d0f1f73ec0e79e9c1dbc8568348158048d6aecb574",
          "linkedWithoutMetadata": "f65d9910ddbc40d96c4814d0f1f73ec0e79e9c1dbc8568348158048d6aecb574"
        },
        "inherit": [
          "@onchain-id/solidity/contracts/storage/Structs.sol:Structs"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_initialized",
            "src": "@onchain-id/solidity/contracts/storage/Storage.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_canInteract",
            "src": "@onchain-id/solidity/contracts/storage/Storage.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_executionNonce",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:7"
            },
            {
              "label": "_keys",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(Key)2050_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:10"
            },
            {
              "label": "_keysByPurpose",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:16"
            },
            {
              "label": "_executions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Execution)2061_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:19"
            },
            {
              "label": "_claims",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(Claim)2074_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:22"
            },
            {
              "label": "_claimsByTopic",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:25"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:28"
            },
            {
              "label": "_canInteract",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:31"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Storage",
              "src": "@onchain-id/solidity/contracts/storage/Storage.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Claim)2074_storage)": {
              "label": "mapping(bytes32 => struct Structs.Claim)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Key)2050_storage)": {
              "label": "mapping(bytes32 => struct Structs.Key)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(uint256 => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Execution)2061_storage)": {
              "label": "mapping(uint256 => struct Structs.Execution)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Claim)2074_storage": {
              "label": "struct Structs.Claim",
              "members": [
                {
                  "label": "topic",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "scheme",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "issuer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "signature",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "uri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Execution)2061_storage": {
              "label": "struct Structs.Execution",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "approved",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Key)2050_storage": {
              "label": "struct Structs.Key",
              "members": [
                {
                  "label": "purposes",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "keyType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/storage/Structs.sol:Structs": {
        "src": "@onchain-id/solidity/contracts/storage/Structs.sol:4",
        "version": {
          "withMetadata": "a43aa2fca03b7775a6ed65fa2441385d8e3b4782e2b7fba2a3b746d737c66ddf",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@onchain-id/solidity/contracts/version/Version.sol:Version": {
        "src": "@onchain-id/solidity/contracts/version/Version.sol:8",
        "version": {
          "withMetadata": "f35a50f5006d0e5cf89ce0eaa1bf9f68d498bd58cf5a3fa0b4d87bce7d5363d2",
          "withoutMetadata": "79ee3acf05949c49d61e8307be0542228963caea639ee047edc224c7a5145ffa",
          "linkedWithoutMetadata": "79ee3acf05949c49d61e8307be0542228963caea639ee047edc224c7a5145ffa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7834828060f66da0039d30efb993f5f2643830d689ce2cdff803e8bbc308450e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:34",
        "version": {
          "withMetadata": "18b49f515a9f79e9aa02e952f780330a0f3540b99eec13988e7dd000b0b51c61",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "2fa1f15ae51f1bcf4f66ee3254310aad0628572a787cea335d826a9fbb782920",
          "withoutMetadata": "2fa1f15ae51f1bcf4f66ee3254310aad0628572a787cea335d826a9fbb782920",
          "linkedWithoutMetadata": "2fa1f15ae51f1bcf4f66ee3254310aad0628572a787cea335d826a9fbb782920"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "178a051f17013c4500566175c9518ace4f970a9bdf34d1c38e1de64c53825528",
          "withoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc",
          "linkedWithoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:22",
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "557a842e919820d389150d31e908ef58caa7fd0b39ca86f18e999ea5ffb153fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "2d0516a3701539328fed6e6607cbf5de9a106e2aa06905e4dd843a09130f7462",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "efd3171a58b3b917cd07f35f8c485937fa0a30b212c4893ad6f264c9462a8195",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "b0fccc5c954af5dd9623899b14b929d5a8f094ab28d9ba58a8ea4e0d549f4bc3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "6ff6c2317c31a63a013d923ab3df84fa78f33ae956c5917a3837aedb7bbcbd1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/DVA/DVATransferManager.sol:DVATransferManager": {
        "src": "contracts/DVA/DVATransferManager.sol:69",
        "version": {
          "withMetadata": "b2b480563d1bd727154b1a703588e0be1bb099e91486ac9179d0a1b7fc39a84d",
          "withoutMetadata": "7c332cd6dd173855d9526807553ea397e5cba89877be597e26f13af50c3ca650",
          "linkedWithoutMetadata": "7c332cd6dd173855d9526807553ea397e5cba89877be597e26f13af50c3ca650"
        },
        "inherit": [
          "contracts/DVA/IDVATransferManager.sol:IDVATransferManager"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setApprovalCriteria(address,bool,bool,bool,address[])",
          "initiateTransfer(address,address,uint256)",
          "approveTransfer(bytes32)",
          "delegateApproveTransfer(bytes32,struct IDVATransferManager.Signature[])",
          "cancelTransfer(bytes32)",
          "rejectTransfer(bytes32)",
          "getApprovalCriteria(address)",
          "getTransfer(bytes32)",
          "getNextApprover(bytes32)",
          "getNextTxNonce()",
          "name()",
          "calculateTransferID(uint256,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DVATransferManager",
            "src": "contracts/DVA/DVATransferManager.sol:80"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_approvalCriteria",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_struct(ApprovalCriteria)7541_storage)",
              "contract": "DVATransferManager",
              "src": "contracts/DVA/DVATransferManager.sol:72"
            },
            {
              "label": "_transfers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(Transfer)7559_storage)",
              "contract": "DVATransferManager",
              "src": "contracts/DVA/DVATransferManager.sol:75"
            },
            {
              "label": "_txNonce",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DVATransferManager",
              "src": "contracts/DVA/DVATransferManager.sol:78"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Approver)7566_storage)dyn_storage": {
              "label": "struct IDVATransferManager.Approver[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(TransferStatus)7529": {
              "label": "enum IDVATransferManager.TransferStatus",
              "members": [
                "PENDING",
                "COMPLETED",
                "CANCELLED",
                "REJECTED"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(ApprovalCriteria)7541_storage)": {
              "label": "mapping(address => struct IDVATransferManager.ApprovalCriteria)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Transfer)7559_storage)": {
              "label": "mapping(bytes32 => struct IDVATransferManager.Transfer)",
              "numberOfBytes": "32"
            },
            "t_struct(ApprovalCriteria)7541_storage": {
              "label": "struct IDVATransferManager.ApprovalCriteria",
              "members": [
                {
                  "label": "includeRecipientApprover",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "includeAgentApprover",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "sequentialApproval",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "additionalApprovers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "hash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Approver)7566_storage": {
              "label": "struct IDVATransferManager.Approver",
              "members": [
                {
                  "label": "wallet",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "anyTokenAgent",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "approved",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Transfer)7559_storage": {
              "label": "struct IDVATransferManager.Transfer",
              "members": [
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "sender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipient",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(TransferStatus)7529",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "approvers",
                  "type": "t_array(t_struct(Approver)7566_storage)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "approvalCriteriaHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/DVA/IDVATransferManager.sol:IDVATransferManager": {
        "src": "contracts/DVA/IDVATransferManager.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setApprovalCriteria(address,bool,bool,bool,address[])",
          "initiateTransfer(address,address,uint256)",
          "approveTransfer(bytes32)",
          "delegateApproveTransfer(bytes32,struct IDVATransferManager.Signature[])",
          "cancelTransfer(bytes32)",
          "rejectTransfer(bytes32)",
          "getApprovalCriteria(address)",
          "getTransfer(bytes32)",
          "getNextApprover(bytes32)",
          "getNextTxNonce()",
          "name()",
          "calculateTransferID(uint256,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/DVD/DVDTransferManager.sol:DVDTransferManager": {
        "src": "contracts/DVD/DVDTransferManager.sol:69",
        "version": {
          "withMetadata": "d6f8e87190c0d339ffb10d28d4487854f723758187d9b77a7b6f17c2049f8433",
          "withoutMetadata": "97c2b2aa5dbf052103dff02882efd24bb6b387d88259a9d297ac0cc0c133de46",
          "linkedWithoutMetadata": "97c2b2aa5dbf052103dff02882efd24bb6b387d88259a9d297ac0cc0c133de46"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "modifyFee(address,address,uint256,uint256,uint256,address,address)",
          "initiateDVDTransfer(address,uint256,address,address,uint256)",
          "takeDVDTransfer(bytes32)",
          "cancelDVDTransfer(bytes32)",
          "isTREX(address)",
          "isTREXAgent(address,address)",
          "isTREXOwner(address,address)",
          "calculateFee(bytes32)",
          "calculateParity(address,address)",
          "calculateTransferID(uint256,address,address,uint256,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DVDTransferManager",
            "src": "contracts/DVD/DVDTransferManager.sol:155"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(Fee)7819_storage)",
              "contract": "DVDTransferManager",
              "src": "contracts/DVD/DVDTransferManager.sol:97"
            },
            {
              "label": "token1ToDeliver",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(Delivery)7808_storage)",
              "contract": "DVDTransferManager",
              "src": "contracts/DVD/DVDTransferManager.sol:100"
            },
            {
              "label": "token2ToDeliver",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Delivery)7808_storage)",
              "contract": "DVDTransferManager",
              "src": "contracts/DVD/DVDTransferManager.sol:103"
            },
            {
              "label": "txNonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "DVDTransferManager",
              "src": "contracts/DVD/DVDTransferManager.sol:106"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Delivery)7808_storage)": {
              "label": "mapping(bytes32 => struct DVDTransferManager.Delivery)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Fee)7819_storage)": {
              "label": "mapping(bytes32 => struct DVDTransferManager.Fee)",
              "numberOfBytes": "32"
            },
            "t_struct(Delivery)7808_storage": {
              "label": "struct DVDTransferManager.Delivery",
              "members": [
                {
                  "label": "counterpart",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Fee)7819_storage": {
              "label": "struct DVDTransferManager.Fee",
              "members": [
                {
                  "label": "token1Fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token2Fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "feeBase",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "fee1Wallet",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "fee2Wallet",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/ClaimIssuerTrick.sol:ClaimIssuerTrick": {
        "src": "contracts/_testContracts/ClaimIssuerTrick.sol:1",
        "version": {
          "withMetadata": "b4f8356d0884780a1acb38e0ef1d6875beba06f18685526b3ccca1cf8d0c077f",
          "withoutMetadata": "0f03bbf2d6628f62d8c968a1ad61e333d539dcc5a71def481e966cc036bcfb98",
          "linkedWithoutMetadata": "0f03bbf2d6628f62d8c968a1ad61e333d539dcc5a71def481e966cc036bcfb98"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "isClaimValid(address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/MockContract.sol:MockContract": {
        "src": "contracts/_testContracts/MockContract.sol:3",
        "version": {
          "withMetadata": "901da26c001957bbc5023adb58af5c641028c4d330446665b395a8e8dea379ad",
          "withoutMetadata": "f0973ae29786850b0004074d52ea6be9da0ce1df81e850126058058e58185b85",
          "linkedWithoutMetadata": "f0973ae29786850b0004074d52ea6be9da0ce1df81e850126058058e58185b85"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "identityRegistry()",
          "investorCountry(address)",
          "setInvestorCountry(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_irRegistry",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockContract",
              "src": "contracts/_testContracts/MockContract.sol:4"
            },
            {
              "label": "_investorCountry",
              "offset": 20,
              "slot": "0",
              "type": "t_uint16",
              "contract": "MockContract",
              "src": "contracts/_testContracts/MockContract.sol:5"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/OIDImports.sol:OIDImports": {
        "src": "contracts/_testContracts/OIDImports.sol:8",
        "version": {
          "withMetadata": "a63f11899cad5391a98a6819f21e92c7b5972f7e6597882235387bc1712e237d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/TestERC20.sol:TestERC20": {
        "src": "contracts/_testContracts/TestERC20.sol:66",
        "version": {
          "withMetadata": "e833dc7c3ebba5d92b1e2cfd58091b8ffff3a32baca7af61d68dbad73e0917e6",
          "withoutMetadata": "eff55b899a9b50e89be26d7a3d4d9d06c8041ceb7e0d5bd287bb48321bddbb50",
          "linkedWithoutMetadata": "eff55b899a9b50e89be26d7a3d4d9d06c8041ceb7e0d5bd287bb48321bddbb50"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "pause()",
          "mint(address,uint256)",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "contracts/_testContracts/TestERC20.sol:68"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/TestUpgradedCountryAllowModule.sol:TestUpgradedCountryAllowModule": {
        "src": "contracts/_testContracts/TestUpgradedCountryAllowModule.sol:67",
        "version": {
          "withMetadata": "00a5efd9073ed4f64286b9d60715d408e9fcb84e429b9e9c0eb90a87e88ac2d1",
          "withoutMetadata": "25fc10979d4a75ae811eb3fa4001776e1f640f436c6d6b99d4cb050ec2d9a8ee",
          "linkedWithoutMetadata": "25fc10979d4a75ae811eb3fa4001776e1f640f436c6d6b99d4cb050ec2d9a8ee"
        },
        "inherit": [
          "contracts/compliance/modular/modules/CountryAllowModule.sol:CountryAllowModule",
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "setNewField(uint256)",
          "getNewField()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_allowedCountries",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_mapping(t_uint16,t_bool))",
              "contract": "CountryAllowModule",
              "src": "contracts/compliance/modular/modules/CountryAllowModule.sol:77"
            },
            {
              "label": "_newField",
              "offset": 0,
              "slot": "202",
              "type": "t_uint256",
              "contract": "TestUpgradedCountryAllowModule",
              "src": "contracts/_testContracts/TestUpgradedCountryAllowModule.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint16,t_bool))": {
              "label": "mapping(address => mapping(uint16 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_bool)": {
              "label": "mapping(uint16 => bool)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyIA.sol:ContextLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyIA.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyIA.sol:LegacyIA": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyIA.sol:70",
        "version": {
          "withMetadata": "cb95f4c0eaa1817b4b908db966500207b83d8895ce9e308014b90935ca543a87",
          "withoutMetadata": "26ae7ca8bfb2de509d12fde9eb2101d6e78533f770aed7b1fb0aef36b7f48a9a",
          "linkedWithoutMetadata": "26ae7ca8bfb2de509d12fde9eb2101d6e78533f770aed7b1fb0aef36b7f48a9a"
        },
        "inherit": [
          "contracts/_testContracts/v_3_5_2/LegacyIA.sol:OwnableLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyIA.sol:ContextLegacy"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getImplementation()",
          "updateImplementation(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegacyIA",
            "src": "contracts/_testContracts/v_3_5_2/LegacyIA.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyIA.sol:18"
            },
            {
              "label": "implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LegacyIA",
              "src": "contracts/_testContracts/v_3_5_2/LegacyIA.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyIA.sol:OwnableLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyIA.sol:17",
        "inherit": [
          "contracts/_testContracts/v_3_5_2/LegacyIA.sol:ContextLegacy"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OwnableLegacy",
            "src": "contracts/_testContracts/v_3_5_2/LegacyIA.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyIA.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyProxy.sol:IImplementationAuthorityLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getImplementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyProxy.sol:LegacyProxy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyProxy.sol:9",
        "version": {
          "withMetadata": "f13769fc628fd02e5c1b612cf957606f3dca346da415857e51c57e83e173a0fb",
          "withoutMetadata": "ea9cf294f2e96c868fb2d40fae1e57ae94e18df3f9929b47e0179f1b9b70aed0",
          "linkedWithoutMetadata": "ea9cf294f2e96c868fb2d40fae1e57ae94e18df3f9929b47e0179f1b9b70aed0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,string,string,uint8,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegacyProxy",
            "src": "contracts/_testContracts/v_3_5_2/LegacyProxy.sol:12"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/_testContracts/v_3_5_2/LegacyProxy.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "implementationAuthority",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LegacyProxy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyProxy.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:AgentRoleUpgradeableLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1751",
        "version": {
          "withMetadata": "b2ca6245a280403294ae5e98de219956ba9ecfafd11f154b622b89d180e3fdba",
          "withoutMetadata": "522a118727d106a059b70d701ce9876eef7fbe2dfaa70a97dd3dae19ea1ed50d",
          "linkedWithoutMetadata": "522a118727d106a059b70d701ce9876eef7fbe2dfaa70a97dd3dae19ea1ed50d"
        },
        "inherit": [
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:OwnableUpgradeableLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:ContextUpgradeableLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:InitializableLegacy"
        ],
        "libraries": [
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:RolesLegacy"
        ],
        "methods": [
          "isAgent(address)",
          "addAgent(address)",
          "removeAgent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1555"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1560"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1612"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1631"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1685"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Role)10901_storage",
              "contract": "AgentRoleUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1757"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)10901_storage": {
              "label": "struct RolesLegacy.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:ContextUpgradeableLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1597",
        "inherit": [
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:InitializableLegacy"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1555"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1560"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1612"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IClaimIssuerLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:204",
        "inherit": [
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:LegacyIIdentity",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IERC735Legacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IERC734Legacy"
        ],
        "libraries": [],
        "methods": [
          "revokeClaim(bytes32,address)",
          "getRecoveredAddress(bytes,bytes32)",
          "isClaimRevoked(bytes)",
          "isClaimValid(address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IClaimTopicsRegistryLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:359",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addClaimTopic(uint256)",
          "removeClaimTopic(uint256)",
          "getClaimTopics()",
          "transferOwnershipOnClaimTopicsRegistryContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IComplianceLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:828",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTokenAgent(address)",
          "isTokenBound(address)",
          "addTokenAgent(address)",
          "removeTokenAgent(address)",
          "bindToken(address)",
          "unbindToken(address)",
          "canTransfer(address,address,uint256)",
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "transferOwnershipOnComplianceContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IERC20Legacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:968",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IERC734Legacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addKey(bytes32,uint256,uint256)",
          "approve(uint256,bool)",
          "execute(address,uint256,bytes)",
          "getKey(bytes32)",
          "getKeyPurposes(bytes32)",
          "getKeysByPurpose(uint256)",
          "keyHasPurpose(bytes32,uint256)",
          "removeKey(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IERC735Legacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:126",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getClaim(bytes32)",
          "getClaimIdsByTopic(uint256)",
          "addClaim(uint256,uint256,address,bytes,bytes,string)",
          "removeClaim(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IIdentityRegistryLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:595",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerIdentity(address,address,uint16)",
          "deleteIdentity(address)",
          "setIdentityRegistryStorage(address)",
          "setClaimTopicsRegistry(address)",
          "setTrustedIssuersRegistry(address)",
          "updateCountry(address,uint16)",
          "updateIdentity(address,address)",
          "batchRegisterIdentity(address[],contract LegacyIIdentity[],uint16[])",
          "contains(address)",
          "isVerified(address)",
          "identity(address)",
          "investorCountry(address)",
          "identityStorage()",
          "issuersRegistry()",
          "topicsRegistry()",
          "transferOwnershipOnIdentityRegistryContract(address)",
          "addAgentOnIdentityRegistryContract(address)",
          "removeAgentOnIdentityRegistryContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IIdentityRegistryStorageLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:431",
        "inherit": [],
        "libraries": [],
        "methods": [
          "linkedIdentityRegistries()",
          "storedIdentity(address)",
          "storedInvestorCountry(address)",
          "addIdentityToStorage(address,address,uint16)",
          "removeIdentityFromStorage(address)",
          "modifyStoredInvestorCountry(address,uint16)",
          "modifyStoredIdentity(address,address)",
          "transferOwnershipOnIdentityRegistryStorage(address)",
          "bindIdentityRegistry(address)",
          "unbindIdentityRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:ITokenLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1071",
        "inherit": [
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IERC20Legacy"
        ],
        "libraries": [],
        "methods": [
          "decimals()",
          "name()",
          "onchainID()",
          "symbol()",
          "version()",
          "identityRegistry()",
          "compliance()",
          "paused()",
          "isFrozen(address)",
          "getFrozenTokens(address)",
          "setName(string)",
          "setSymbol(string)",
          "setOnchainID(address)",
          "pause()",
          "unpause()",
          "setAddressFrozen(address,bool)",
          "freezePartialTokens(address,uint256)",
          "unfreezePartialTokens(address,uint256)",
          "setIdentityRegistry(address)",
          "setCompliance(address)",
          "forcedTransfer(address,address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "recoveryAddress(address,address,address)",
          "batchTransfer(address[],uint256[])",
          "batchForcedTransfer(address[],address[],uint256[])",
          "batchMint(address[],uint256[])",
          "batchBurn(address[],uint256[])",
          "batchSetAddressFrozen(address[],bool[])",
          "batchFreezePartialTokens(address[],uint256[])",
          "batchUnfreezePartialTokens(address[],uint256[])",
          "transferOwnershipOnTokenContract(address)",
          "addAgentOnTokenContract(address)",
          "removeAgentOnTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:ITrustedIssuersRegistryLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:239",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTrustedIssuer(address,uint256[])",
          "removeTrustedIssuer(address)",
          "updateIssuerClaimTopics(address,uint256[])",
          "getTrustedIssuers()",
          "isTrustedIssuer(address)",
          "getTrustedIssuerClaimTopics(address)",
          "hasClaimTopic(address,uint256)",
          "transferOwnershipOnIssuersRegistryContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:InitializableLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1550",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1555"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1560"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:LegacyIIdentity": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:198",
        "inherit": [
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IERC735Legacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IERC734Legacy"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:LegacyToken_3_5_2": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1805",
        "version": {
          "withMetadata": "f47998af6037d6a7c64e386c702ad0f849c78403eaac58c99fc5fd719e85c176",
          "withoutMetadata": "7f78a837e7a0312e6234adfea988b3ce54959144719d4257ca818661121d3572",
          "linkedWithoutMetadata": "7f78a837e7a0312e6234adfea988b3ce54959144719d4257ca818661121d3572"
        },
        "inherit": [
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:TokenStorageLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:AgentRoleUpgradeableLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:OwnableUpgradeableLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:ContextUpgradeableLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:InitializableLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:ITokenLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:IERC20Legacy"
        ],
        "libraries": [],
        "methods": [
          "init(address,address,string,string,uint8,address)",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "decimals()",
          "name()",
          "onchainID()",
          "symbol()",
          "version()",
          "setName(string)",
          "setSymbol(string)",
          "setOnchainID(address)",
          "paused()",
          "isFrozen(address)",
          "getFrozenTokens(address)",
          "transfer(address,uint256)",
          "pause()",
          "unpause()",
          "identityRegistry()",
          "compliance()",
          "batchTransfer(address[],uint256[])",
          "transferFrom(address,address,uint256)",
          "forcedTransfer(address,address,uint256)",
          "batchForcedTransfer(address[],address[],uint256[])",
          "mint(address,uint256)",
          "batchMint(address[],uint256[])",
          "burn(address,uint256)",
          "batchBurn(address[],uint256[])",
          "setAddressFrozen(address,bool)",
          "batchSetAddressFrozen(address[],bool[])",
          "freezePartialTokens(address,uint256)",
          "batchFreezePartialTokens(address[],uint256[])",
          "unfreezePartialTokens(address,uint256)",
          "batchUnfreezePartialTokens(address[],uint256[])",
          "setIdentityRegistry(address)",
          "setCompliance(address)",
          "recoveryAddress(address,address,address)",
          "transferOwnershipOnTokenContract(address)",
          "addAgentOnTokenContract(address)",
          "removeAgentOnTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1555"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1560"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1612"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1631"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1685"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Role)10901_storage",
              "contract": "AgentRoleUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1757"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1509"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1510"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "104",
              "type": "t_uint256",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1511"
            },
            {
              "label": "tokenName",
              "offset": 0,
              "slot": "105",
              "type": "t_string_storage",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1514"
            },
            {
              "label": "tokenSymbol",
              "offset": 0,
              "slot": "106",
              "type": "t_string_storage",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1515"
            },
            {
              "label": "tokenDecimals",
              "offset": 0,
              "slot": "107",
              "type": "t_uint8",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1516"
            },
            {
              "label": "tokenOnchainID",
              "offset": 1,
              "slot": "107",
              "type": "t_address",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1517"
            },
            {
              "label": "frozen",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1521"
            },
            {
              "label": "frozenTokens",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1522"
            },
            {
              "label": "tokenPaused",
              "offset": 0,
              "slot": "110",
              "type": "t_bool",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1524"
            },
            {
              "label": "tokenIdentityRegistry",
              "offset": 1,
              "slot": "110",
              "type": "t_contract(IIdentityRegistryLegacy)10125",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1527"
            },
            {
              "label": "tokenCompliance",
              "offset": 0,
              "slot": "111",
              "type": "t_contract(IComplianceLegacy)10231",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1530"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IComplianceLegacy)10231": {
              "label": "contract IComplianceLegacy",
              "numberOfBytes": "20"
            },
            "t_contract(IIdentityRegistryLegacy)10125": {
              "label": "contract IIdentityRegistryLegacy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Role)10901_storage": {
              "label": "struct RolesLegacy.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:OwnableUpgradeableLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1630",
        "inherit": [
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:ContextUpgradeableLegacy",
          "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:InitializableLegacy"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1555"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1560"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1612"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1631"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeableLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1685"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:RolesLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1694",
        "version": {
          "withMetadata": "22828796ced6972fbb8bc6f2a70307518f91138fef18125b4822b83c7884175b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:TokenStorageLegacy": {
        "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1507",
        "version": {
          "withMetadata": "df738636064d501b26852fcaf97b21b54e36c84bd75822e44ec9dbf3c263113d",
          "withoutMetadata": "1b42486e1837f370f068314cc41c3f55138b528ffffae40f03e9a4207b3f91b8",
          "linkedWithoutMetadata": "1b42486e1837f370f068314cc41c3f55138b528ffffae40f03e9a4207b3f91b8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "tokenPaused",
            "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1524"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1509"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1510"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1511"
            },
            {
              "label": "tokenName",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1514"
            },
            {
              "label": "tokenSymbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1515"
            },
            {
              "label": "tokenDecimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1516"
            },
            {
              "label": "tokenOnchainID",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1517"
            },
            {
              "label": "frozen",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1521"
            },
            {
              "label": "frozenTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1522"
            },
            {
              "label": "tokenPaused",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1524"
            },
            {
              "label": "tokenIdentityRegistry",
              "offset": 1,
              "slot": "8",
              "type": "t_contract(IIdentityRegistryLegacy)10125",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1527"
            },
            {
              "label": "tokenCompliance",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IComplianceLegacy)10231",
              "contract": "TokenStorageLegacy",
              "src": "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol:1530"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IComplianceLegacy)10231": {
              "label": "contract IComplianceLegacy",
              "numberOfBytes": "20"
            },
            "t_contract(IIdentityRegistryLegacy)10125": {
              "label": "contract IIdentityRegistryLegacy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance": {
        "src": "contracts/compliance/legacy/BasicCompliance.sol:69",
        "inherit": [
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "addTokenAgent(address)",
          "removeTokenAgent(address)",
          "bindToken(address)",
          "unbindToken(address)",
          "isTokenAgent(address)",
          "isTokenBound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/DefaultCompliance.sol:DefaultCompliance": {
        "src": "contracts/compliance/legacy/DefaultCompliance.sol:67",
        "version": {
          "withMetadata": "17f2448c0dca9a600b4512122e50c69962b652de13024126e237f41f1c639f91",
          "withoutMetadata": "cb3215e6391cd2253efa13b460f36519e1a0d17add02c123646fd48aceb283b6",
          "linkedWithoutMetadata": "cb3215e6391cd2253efa13b460f36519e1a0d17add02c123646fd48aceb283b6"
        },
        "inherit": [
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/ICompliance.sol:ICompliance": {
        "src": "contracts/compliance/legacy/ICompliance.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokenAgent(address)",
          "removeTokenAgent(address)",
          "bindToken(address)",
          "unbindToken(address)",
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "isTokenAgent(address)",
          "isTokenBound(address)",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/features/ApproveTransfer.sol:ApproveTransfer": {
        "src": "contracts/compliance/legacy/features/ApproveTransfer.sol:71",
        "inherit": [
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "removeApproval(address,address,uint256)",
          "approveAndTransfer(address,address,uint256)",
          "approveTransfer(address,address,uint256)",
          "complianceCheckOnApproveTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "_transfersApproved",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ApproveTransfer",
              "src": "contracts/compliance/legacy/features/ApproveTransfer.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/features/CountryRestrictions.sol:CountryRestrictions": {
        "src": "contracts/compliance/legacy/features/CountryRestrictions.sol:71",
        "inherit": [
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "batchRestrictCountries(uint16[])",
          "batchUnrestrictCountries(uint16[])",
          "addCountryRestriction(uint16)",
          "removeCountryRestriction(uint16)",
          "isCountryRestricted(uint16)",
          "complianceCheckOnCountryRestrictions(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "_restrictedCountries",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint16,t_bool)",
              "contract": "CountryRestrictions",
              "src": "contracts/compliance/legacy/features/CountryRestrictions.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_bool)": {
              "label": "mapping(uint16 => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/features/CountryWhitelisting.sol:CountryWhitelisting": {
        "src": "contracts/compliance/legacy/features/CountryWhitelisting.sol:71",
        "inherit": [
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "batchWhitelistCountries(uint16[])",
          "batchUnWhitelistCountries(uint16[])",
          "whitelistCountry(uint16)",
          "unWhitelistCountry(uint16)",
          "isCountryWhitelisted(uint16)",
          "complianceCheckOnCountryWhitelisting(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "_whitelistedCountries",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint16,t_bool)",
              "contract": "CountryWhitelisting",
              "src": "contracts/compliance/legacy/features/CountryWhitelisting.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_bool)": {
              "label": "mapping(uint16 => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/features/DayMonthLimits.sol:DayMonthLimits": {
        "src": "contracts/compliance/legacy/features/DayMonthLimits.sol:71",
        "inherit": [
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "setDailyLimit(uint256)",
          "setMonthlyLimit(uint256)",
          "complianceCheckOnDayMonthLimits(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "dailyLimit",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "DayMonthLimits",
              "src": "contracts/compliance/legacy/features/DayMonthLimits.sol:82"
            },
            {
              "label": "monthlyLimit",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DayMonthLimits",
              "src": "contracts/compliance/legacy/features/DayMonthLimits.sol:85"
            },
            {
              "label": "usersCounters",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(TransferCounter)13795_storage)",
              "contract": "DayMonthLimits",
              "src": "contracts/compliance/legacy/features/DayMonthLimits.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(TransferCounter)13795_storage)": {
              "label": "mapping(address => struct DayMonthLimits.TransferCounter)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TransferCounter)13795_storage": {
              "label": "struct DayMonthLimits.TransferCounter",
              "members": [
                {
                  "label": "dailyCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "monthlyCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "dailyTimer",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "monthlyTimer",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol:ExchangeMonthlyLimits": {
        "src": "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol:71",
        "inherit": [
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "setExchangeMonthlyLimit(address,uint256)",
          "addExchangeID(address)",
          "removeExchangeID(address)",
          "isExchangeID(address)",
          "getMonthlyCounter(address,address)",
          "getMonthlyTimer(address,address)",
          "getExchangeMonthlyLimit(address)",
          "complianceCheckOnExchangeMonthlyLimits(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "_exchangeMonthlyLimit",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ExchangeMonthlyLimits",
              "src": "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol:80"
            },
            {
              "label": "_exchangeCounters",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(ExchangeTransferCounter)14132_storage))",
              "contract": "ExchangeMonthlyLimits",
              "src": "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol:83"
            },
            {
              "label": "_exchangeIDs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ExchangeMonthlyLimits",
              "src": "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(ExchangeTransferCounter)14132_storage))": {
              "label": "mapping(address => mapping(address => struct ExchangeMonthlyLimits.ExchangeTransferCounter))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(ExchangeTransferCounter)14132_storage)": {
              "label": "mapping(address => struct ExchangeMonthlyLimits.ExchangeTransferCounter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(ExchangeTransferCounter)14132_storage": {
              "label": "struct ExchangeMonthlyLimits.ExchangeTransferCounter",
              "members": [
                {
                  "label": "monthlyCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "monthlyTimer",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/features/MaxBalance.sol:MaxBalance": {
        "src": "contracts/compliance/legacy/features/MaxBalance.sol:70",
        "inherit": [
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "setMaxBalance(uint256)",
          "complianceCheckOnMaxBalance(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "maxBalance",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "MaxBalance",
              "src": "contracts/compliance/legacy/features/MaxBalance.sol:73"
            },
            {
              "label": "IDBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MaxBalance",
              "src": "contracts/compliance/legacy/features/MaxBalance.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/features/SupplyLimit.sol:SupplyLimit": {
        "src": "contracts/compliance/legacy/features/SupplyLimit.sol:71",
        "inherit": [
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "setSupplyLimit(uint256)",
          "complianceCheckOnSupplyLimit(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "supplyLimit",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SupplyLimit",
              "src": "contracts/compliance/legacy/features/SupplyLimit.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/test/ApproveTransferTest.sol:ApproveTransferTest": {
        "src": "contracts/compliance/legacy/test/ApproveTransferTest.sol:67",
        "version": {
          "withMetadata": "78960692740e33a50f36dd5c7fd438d13413675d72f9a4cf6d58b829acd2a994",
          "withoutMetadata": "f4e46dc7f71d2f44416aeeede4063e958ef95c802094796e815eb6ebabb28a0f",
          "linkedWithoutMetadata": "f4e46dc7f71d2f44416aeeede4063e958ef95c802094796e815eb6ebabb28a0f"
        },
        "inherit": [
          "contracts/compliance/legacy/features/ApproveTransfer.sol:ApproveTransfer",
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "_transfersApproved",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ApproveTransfer",
              "src": "contracts/compliance/legacy/features/ApproveTransfer.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/test/CountryRestrictionsTest.sol:CountryRestrictionsTest": {
        "src": "contracts/compliance/legacy/test/CountryRestrictionsTest.sol:67",
        "version": {
          "withMetadata": "db6ccc6b15f5ab8ea858a08e915d644b3dfc1dcd1b7fce5f72a871ecb3a2b64a",
          "withoutMetadata": "79d84e8252da1c27e078afe7a0c190b5da4f94c143a9f98d12021f86e6e9cd6d",
          "linkedWithoutMetadata": "79d84e8252da1c27e078afe7a0c190b5da4f94c143a9f98d12021f86e6e9cd6d"
        },
        "inherit": [
          "contracts/compliance/legacy/features/CountryRestrictions.sol:CountryRestrictions",
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "_restrictedCountries",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint16,t_bool)",
              "contract": "CountryRestrictions",
              "src": "contracts/compliance/legacy/features/CountryRestrictions.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_bool)": {
              "label": "mapping(uint16 => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/test/CountryWhitelistingTest.sol:CountryWhitelistingTest": {
        "src": "contracts/compliance/legacy/test/CountryWhitelistingTest.sol:67",
        "version": {
          "withMetadata": "77a15d2ff01dc367b449a8bafcd71b97c9360b291580be4560532c0d8fe8a17c",
          "withoutMetadata": "9d3a532119675d1831ace80981c24e249fb3a1e9ac8386bd965c5d54313dbbad",
          "linkedWithoutMetadata": "9d3a532119675d1831ace80981c24e249fb3a1e9ac8386bd965c5d54313dbbad"
        },
        "inherit": [
          "contracts/compliance/legacy/features/CountryWhitelisting.sol:CountryWhitelisting",
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "_whitelistedCountries",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint16,t_bool)",
              "contract": "CountryWhitelisting",
              "src": "contracts/compliance/legacy/features/CountryWhitelisting.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_bool)": {
              "label": "mapping(uint16 => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/test/DayMonthLimitsTest.sol:DayMonthLimitsTest": {
        "src": "contracts/compliance/legacy/test/DayMonthLimitsTest.sol:67",
        "version": {
          "withMetadata": "b6286a9146bc7c665f7d5bc0695db869b8a451af3d6dbcd418c46d9003fd821a",
          "withoutMetadata": "faf6b619908145be162f6580e15b009a61e17a41c04557aa9ae744247ac3484c",
          "linkedWithoutMetadata": "faf6b619908145be162f6580e15b009a61e17a41c04557aa9ae744247ac3484c"
        },
        "inherit": [
          "contracts/compliance/legacy/features/DayMonthLimits.sol:DayMonthLimits",
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "dailyLimit",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "DayMonthLimits",
              "src": "contracts/compliance/legacy/features/DayMonthLimits.sol:82"
            },
            {
              "label": "monthlyLimit",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DayMonthLimits",
              "src": "contracts/compliance/legacy/features/DayMonthLimits.sol:85"
            },
            {
              "label": "usersCounters",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(TransferCounter)13795_storage)",
              "contract": "DayMonthLimits",
              "src": "contracts/compliance/legacy/features/DayMonthLimits.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(TransferCounter)13795_storage)": {
              "label": "mapping(address => struct DayMonthLimits.TransferCounter)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TransferCounter)13795_storage": {
              "label": "struct DayMonthLimits.TransferCounter",
              "members": [
                {
                  "label": "dailyCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "monthlyCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "dailyTimer",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "monthlyTimer",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/test/ExchangeMonthlyLimitsTest.sol:ExchangeMonthlyLimitsTest": {
        "src": "contracts/compliance/legacy/test/ExchangeMonthlyLimitsTest.sol:67",
        "version": {
          "withMetadata": "8be3f4b956dd2e742825a632153be605694164794a5ac42c9de77cf084a18317",
          "withoutMetadata": "6ff90dafc7ea831f3cda5378ef83048bb9ee0295b37092d084bc153d20dbc595",
          "linkedWithoutMetadata": "6ff90dafc7ea831f3cda5378ef83048bb9ee0295b37092d084bc153d20dbc595"
        },
        "inherit": [
          "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol:ExchangeMonthlyLimits",
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "_exchangeMonthlyLimit",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ExchangeMonthlyLimits",
              "src": "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol:80"
            },
            {
              "label": "_exchangeCounters",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(ExchangeTransferCounter)14132_storage))",
              "contract": "ExchangeMonthlyLimits",
              "src": "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol:83"
            },
            {
              "label": "_exchangeIDs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ExchangeMonthlyLimits",
              "src": "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(ExchangeTransferCounter)14132_storage))": {
              "label": "mapping(address => mapping(address => struct ExchangeMonthlyLimits.ExchangeTransferCounter))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(ExchangeTransferCounter)14132_storage)": {
              "label": "mapping(address => struct ExchangeMonthlyLimits.ExchangeTransferCounter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(ExchangeTransferCounter)14132_storage": {
              "label": "struct ExchangeMonthlyLimits.ExchangeTransferCounter",
              "members": [
                {
                  "label": "monthlyCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "monthlyTimer",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/test/MaxBalanceTest.sol:MaxBalanceTest": {
        "src": "contracts/compliance/legacy/test/MaxBalanceTest.sol:67",
        "version": {
          "withMetadata": "ac87a8dd33f81cb37bd087599e137c072caa58058e1f5ad4c01fe26e2912ab51",
          "withoutMetadata": "372f55eb430fdb3ebc64bf0350ac23d79dc7d4f8f06d9b340ff54a680dae6a39",
          "linkedWithoutMetadata": "372f55eb430fdb3ebc64bf0350ac23d79dc7d4f8f06d9b340ff54a680dae6a39"
        },
        "inherit": [
          "contracts/compliance/legacy/features/MaxBalance.sol:MaxBalance",
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "maxBalance",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "MaxBalance",
              "src": "contracts/compliance/legacy/features/MaxBalance.sol:73"
            },
            {
              "label": "IDBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MaxBalance",
              "src": "contracts/compliance/legacy/features/MaxBalance.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/legacy/test/SupplyLimitTest.sol:SupplyLimitTest": {
        "src": "contracts/compliance/legacy/test/SupplyLimitTest.sol:67",
        "version": {
          "withMetadata": "b463fe5e003b4ce77ec5c1b4b5e5d444ce4f08e282be0214be073a04d2e5b306",
          "withoutMetadata": "d7c2f6d4f15f4cfc77606400154bd1140fd186e3fcbcf66d0bf2b77d9015b325",
          "linkedWithoutMetadata": "d7c2f6d4f15f4cfc77606400154bd1140fd186e3fcbcf66d0bf2b77d9015b325"
        },
        "inherit": [
          "contracts/compliance/legacy/features/SupplyLimit.sol:SupplyLimit",
          "contracts/compliance/legacy/BasicCompliance.sol:BasicCompliance",
          "contracts/compliance/legacy/ICompliance.sol:ICompliance",
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_tokenAgentsList",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:72"
            },
            {
              "label": "tokenBound",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IToken)32473",
              "contract": "BasicCompliance",
              "src": "contracts/compliance/legacy/BasicCompliance.sol:75"
            },
            {
              "label": "supplyLimit",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SupplyLimit",
              "src": "contracts/compliance/legacy/features/SupplyLimit.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/IModularCompliance.sol:IModularCompliance": {
        "src": "contracts/compliance/modular/IModularCompliance.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "bindToken(address)",
          "unbindToken(address)",
          "addModule(address)",
          "removeModule(address)",
          "callModuleFunction(bytes,address)",
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "canTransfer(address,address,uint256)",
          "getModules()",
          "getTokenBound()",
          "isModuleBound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/MCStorage.sol:MCStorage": {
        "src": "contracts/compliance/modular/MCStorage.sol:66",
        "version": {
          "withMetadata": "f1a5a366f0c72ad579d0aca1eab4c65f837c5a19e30db70e1145264bd66300f0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_tokenBound",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MCStorage",
              "src": "contracts/compliance/modular/MCStorage.sol:68"
            },
            {
              "label": "_modules",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "MCStorage",
              "src": "contracts/compliance/modular/MCStorage.sol:71"
            },
            {
              "label": "_moduleBound",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MCStorage",
              "src": "contracts/compliance/modular/MCStorage.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "MCStorage",
              "src": "contracts/compliance/modular/MCStorage.sol:80"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/ModularCompliance.sol:ModularCompliance": {
        "src": "contracts/compliance/modular/ModularCompliance.sol:72",
        "version": {
          "withMetadata": "bdda12bdd2370127b92e6908708b1328d4a3355fc74fad7c4d0d89830ec02a41",
          "withoutMetadata": "cf52da3bd41167051a5ca3be6e736d1b551a31b5d8407329b4dc407a13785bda",
          "linkedWithoutMetadata": "cf52da3bd41167051a5ca3be6e736d1b551a31b5d8407329b4dc407a13785bda"
        },
        "inherit": [
          "contracts/compliance/modular/MCStorage.sol:MCStorage",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/IModularCompliance.sol:IModularCompliance"
        ],
        "libraries": [],
        "methods": [
          "init()",
          "bindToken(address)",
          "unbindToken(address)",
          "addModule(address)",
          "removeModule(address)",
          "transferred(address,address,uint256)",
          "created(address,uint256)",
          "destroyed(address,uint256)",
          "callModuleFunction(bytes,address)",
          "isModuleBound(address)",
          "getModules()",
          "getTokenBound()",
          "canTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_tokenBound",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "MCStorage",
              "src": "contracts/compliance/modular/MCStorage.sol:68"
            },
            {
              "label": "_modules",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_address)dyn_storage",
              "contract": "MCStorage",
              "src": "contracts/compliance/modular/MCStorage.sol:71"
            },
            {
              "label": "_moduleBound",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MCStorage",
              "src": "contracts/compliance/modular/MCStorage.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint256)49_storage",
              "contract": "MCStorage",
              "src": "contracts/compliance/modular/MCStorage.sol:80"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/AbstractModule.sol:AbstractModule": {
        "src": "contracts/compliance/modular/modules/AbstractModule.sol:67",
        "inherit": [
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "bindCompliance(address)",
          "unbindCompliance(address)",
          "isComplianceBound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_complianceBound",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AbstractModule",
              "src": "contracts/compliance/modular/modules/AbstractModule.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable": {
        "src": "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:70",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "bindCompliance(address)",
          "unbindCompliance(address)",
          "isComplianceBound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/ConditionalTransferModule.sol:ConditionalTransferModule": {
        "src": "contracts/compliance/modular/modules/ConditionalTransferModule.sol:79",
        "version": {
          "withMetadata": "65670f7df146d653d45a3d7218e8c27562bfec45f47d4b0a9c345e097c3ad51d",
          "withoutMetadata": "84a4cf8a6aa4e1b73c3c4f54b7aba8994e5b41c1f9b5f99722cfcb6bb9318ece",
          "linkedWithoutMetadata": "84a4cf8a6aa4e1b73c3c4f54b7aba8994e5b41c1f9b5f99722cfcb6bb9318ece"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "batchApproveTransfers(address[],address[],uint256[])",
          "batchUnApproveTransfers(address[],address[],uint256[])",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "approveTransfer(address,address,uint256)",
          "unApproveTransfer(address,address,uint256)",
          "isTransferApproved(address,bytes32)",
          "getTransferApprovals(address,bytes32)",
          "calculateTransferHash(address,address,uint256,address)",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_transfersApproved",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "ConditionalTransferModule",
              "src": "contracts/compliance/modular/modules/ConditionalTransferModule.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/CountryAllowModule.sol:CountryAllowModule": {
        "src": "contracts/compliance/modular/modules/CountryAllowModule.sol:75",
        "version": {
          "withMetadata": "21c1a740359ed9b03538e67c402c7b36b8ef989b9fc3dabe8fcf7d1dc274ca52",
          "withoutMetadata": "e3fe75d0e43ebc9e5604685761ef1c8e57bf854dc78b16a40213da8eace45e35",
          "linkedWithoutMetadata": "e3fe75d0e43ebc9e5604685761ef1c8e57bf854dc78b16a40213da8eace45e35"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "batchAllowCountries(uint16[])",
          "batchDisallowCountries(uint16[])",
          "addAllowedCountry(uint16)",
          "removeAllowedCountry(uint16)",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "isCountryAllowed(address,uint16)",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_allowedCountries",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_mapping(t_uint16,t_bool))",
              "contract": "CountryAllowModule",
              "src": "contracts/compliance/modular/modules/CountryAllowModule.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint16,t_bool))": {
              "label": "mapping(address => mapping(uint16 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_bool)": {
              "label": "mapping(uint16 => bool)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/CountryRestrictModule.sol:CountryRestrictModule": {
        "src": "contracts/compliance/modular/modules/CountryRestrictModule.sol:75",
        "version": {
          "withMetadata": "baf655a69c26e89695cd1caa637ef5f60768132d2752c0cee7724c9b90fe67e0",
          "withoutMetadata": "6cc9fea217f93a7930c1ab73096539ab389aaf7227408762ffa4e88ff1ac3e88",
          "linkedWithoutMetadata": "6cc9fea217f93a7930c1ab73096539ab389aaf7227408762ffa4e88ff1ac3e88"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "addCountryRestriction(uint16)",
          "removeCountryRestriction(uint16)",
          "batchRestrictCountries(uint16[])",
          "batchUnrestrictCountries(uint16[])",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "isCountryRestricted(address,uint16)",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_restrictedCountries",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_mapping(t_uint16,t_bool))",
              "contract": "CountryRestrictModule",
              "src": "contracts/compliance/modular/modules/CountryRestrictModule.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint16,t_bool))": {
              "label": "mapping(address => mapping(uint16 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_bool)": {
              "label": "mapping(uint16 => bool)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/ExchangeMonthlyLimitsModule.sol:ExchangeMonthlyLimitsModule": {
        "src": "contracts/compliance/modular/modules/ExchangeMonthlyLimitsModule.sol:76",
        "version": {
          "withMetadata": "e2372bede80ccd1d90b424f03b1166814b74dd166e52b5b5c1dbf7fba01163db",
          "withoutMetadata": "cf5c250476e3b68206d951aa628e46b2a13bccbb0a397f5df6bcac00b152b56d",
          "linkedWithoutMetadata": "cf5c250476e3b68206d951aa628e46b2a13bccbb0a397f5df6bcac00b152b56d"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setExchangeMonthlyLimit(address,uint256)",
          "addExchangeID(address)",
          "removeExchangeID(address)",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "isExchangeID(address)",
          "getMonthlyCounter(address,address,address)",
          "getMonthlyTimer(address,address,address)",
          "getExchangeMonthlyLimit(address,address)",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_exchangeMonthlyLimit",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ExchangeMonthlyLimitsModule",
              "src": "contracts/compliance/modular/modules/ExchangeMonthlyLimitsModule.sol:84"
            },
            {
              "label": "_exchangeCounters",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_struct(ExchangeTransferCounter)17721_storage)))",
              "contract": "ExchangeMonthlyLimitsModule",
              "src": "contracts/compliance/modular/modules/ExchangeMonthlyLimitsModule.sol:87"
            },
            {
              "label": "_exchangeIDs",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ExchangeMonthlyLimitsModule",
              "src": "contracts/compliance/modular/modules/ExchangeMonthlyLimitsModule.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_struct(ExchangeTransferCounter)17721_storage)))": {
              "label": "mapping(address => mapping(address => mapping(address => struct ExchangeMonthlyLimitsModule.ExchangeTransferCounter)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(ExchangeTransferCounter)17721_storage))": {
              "label": "mapping(address => mapping(address => struct ExchangeMonthlyLimitsModule.ExchangeTransferCounter))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(ExchangeTransferCounter)17721_storage)": {
              "label": "mapping(address => struct ExchangeMonthlyLimitsModule.ExchangeTransferCounter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(ExchangeTransferCounter)17721_storage": {
              "label": "struct ExchangeMonthlyLimitsModule.ExchangeTransferCounter",
              "members": [
                {
                  "label": "monthlyCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "monthlyTimer",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/IModule.sol:IModule": {
        "src": "contracts/compliance/modular/modules/IModule.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "bindCompliance(address)",
          "unbindCompliance(address)",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "isComplianceBound(address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/MaxBalanceModule.sol:MaxBalanceModule": {
        "src": "contracts/compliance/modular/modules/MaxBalanceModule.sol:76",
        "version": {
          "withMetadata": "9a5449982fedf87b20fbf02c396928b0fe94902b68b72b1bae0e3810459dfdb9",
          "withoutMetadata": "cc2fca199c216bf3479fa0184a744d9394edaddaca9a3a25db4ffd5ffb665ee2",
          "linkedWithoutMetadata": "cc2fca199c216bf3479fa0184a744d9394edaddaca9a3a25db4ffd5ffb665ee2"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setMaxBalance(uint256)",
          "preSetModuleState(address,address,uint256)",
          "batchPreSetModuleState(address,address[],uint256[])",
          "presetCompleted(address)",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "getIDBalance(address,address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_compliancePresetStatus",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MaxBalanceModule",
              "src": "contracts/compliance/modular/modules/MaxBalanceModule.sol:81"
            },
            {
              "label": "_maxBalance",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MaxBalanceModule",
              "src": "contracts/compliance/modular/modules/MaxBalanceModule.sol:84"
            },
            {
              "label": "_IDBalance",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "MaxBalanceModule",
              "src": "contracts/compliance/modular/modules/MaxBalanceModule.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/ModuleProxy.sol:ModuleProxy": {
        "src": "contracts/compliance/modular/modules/ModuleProxy.sol:67",
        "version": {
          "withMetadata": "65d2613c02ca52e0c7cbaa42064ade48749d583f7d709b00597961c08f4554bc",
          "withoutMetadata": "65d2613c02ca52e0c7cbaa42064ade48749d583f7d709b00597961c08f4554bc",
          "linkedWithoutMetadata": "65d2613c02ca52e0c7cbaa42064ade48749d583f7d709b00597961c08f4554bc"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ModuleProxy",
            "src": "contracts/compliance/modular/modules/ModuleProxy.sol:69"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/SupplyLimitModule.sol:SupplyLimitModule": {
        "src": "contracts/compliance/modular/modules/SupplyLimitModule.sol:75",
        "version": {
          "withMetadata": "1c0601e3f69bb8307a20a91a7a60207a667e3ad33a85a2bdf1aa0176d078f270",
          "withoutMetadata": "a71935339a9cd35db7b08be153639312b88859e5beea9fe28592561625a2190b",
          "linkedWithoutMetadata": "a71935339a9cd35db7b08be153639312b88859e5beea9fe28592561625a2190b"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setSupplyLimit(uint256)",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "getSupplyLimit(address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_supplyLimits",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SupplyLimitModule",
              "src": "contracts/compliance/modular/modules/SupplyLimitModule.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/TimeExchangeLimitsModule.sol:TimeExchangeLimitsModule": {
        "src": "contracts/compliance/modular/modules/TimeExchangeLimitsModule.sol:76",
        "version": {
          "withMetadata": "5d0916f0d6e06c53b366d8ea40e353bf3268db782b37cbfd664410de7b0193b8",
          "withoutMetadata": "733635d9636321ec99391d3f5c7ca0ca2b17c5d698d28b8ad2b9b79a8b17ffae",
          "linkedWithoutMetadata": "733635d9636321ec99391d3f5c7ca0ca2b17c5d698d28b8ad2b9b79a8b17ffae"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setExchangeLimit(address,(uint32,uint256))",
          "addExchangeID(address)",
          "removeExchangeID(address)",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "getExchangeCounter(address,address,address,uint32)",
          "getExchangeLimits(address,address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "isExchangeID(address)",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_limitValues",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_struct(IndexLimit)19203_storage)))",
              "contract": "TimeExchangeLimitsModule",
              "src": "contracts/compliance/modular/modules/TimeExchangeLimitsModule.sol:94"
            },
            {
              "label": "_exchangeLimits",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(Limit)19198_storage)dyn_storage))",
              "contract": "TimeExchangeLimitsModule",
              "src": "contracts/compliance/modular/modules/TimeExchangeLimitsModule.sol:97"
            },
            {
              "label": "_exchangeCounters",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_struct(ExchangeTransferCounter)19193_storage))))",
              "contract": "TimeExchangeLimitsModule",
              "src": "contracts/compliance/modular/modules/TimeExchangeLimitsModule.sol:100"
            },
            {
              "label": "_exchangeIDs",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TimeExchangeLimitsModule",
              "src": "contracts/compliance/modular/modules/TimeExchangeLimitsModule.sol:104"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Limit)19198_storage)dyn_storage": {
              "label": "struct TimeExchangeLimitsModule.Limit[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Limit)19198_storage)dyn_storage)": {
              "label": "mapping(address => struct TimeExchangeLimitsModule.Limit[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(Limit)19198_storage)dyn_storage))": {
              "label": "mapping(address => mapping(address => struct TimeExchangeLimitsModule.Limit[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_struct(ExchangeTransferCounter)19193_storage))))": {
              "label": "mapping(address => mapping(address => mapping(address => mapping(uint32 => struct TimeExchangeLimitsModule.ExchangeTransferCounter))))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_struct(ExchangeTransferCounter)19193_storage)))": {
              "label": "mapping(address => mapping(address => mapping(uint32 => struct TimeExchangeLimitsModule.ExchangeTransferCounter)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_struct(IndexLimit)19203_storage)))": {
              "label": "mapping(address => mapping(address => mapping(uint32 => struct TimeExchangeLimitsModule.IndexLimit)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(ExchangeTransferCounter)19193_storage))": {
              "label": "mapping(address => mapping(uint32 => struct TimeExchangeLimitsModule.ExchangeTransferCounter))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(IndexLimit)19203_storage))": {
              "label": "mapping(address => mapping(uint32 => struct TimeExchangeLimitsModule.IndexLimit))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(ExchangeTransferCounter)19193_storage)": {
              "label": "mapping(uint32 => struct TimeExchangeLimitsModule.ExchangeTransferCounter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(IndexLimit)19203_storage)": {
              "label": "mapping(uint32 => struct TimeExchangeLimitsModule.IndexLimit)",
              "numberOfBytes": "32"
            },
            "t_struct(ExchangeTransferCounter)19193_storage": {
              "label": "struct TimeExchangeLimitsModule.ExchangeTransferCounter",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "timer",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(IndexLimit)19203_storage": {
              "label": "struct TimeExchangeLimitsModule.IndexLimit",
              "members": [
                {
                  "label": "attributedLimit",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "limitIndex",
                  "type": "t_uint8",
                  "offset": 1,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Limit)19198_storage": {
              "label": "struct TimeExchangeLimitsModule.Limit",
              "members": [
                {
                  "label": "limitTime",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "limitValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/TimeTransfersLimitsModule.sol:TimeTransfersLimitsModule": {
        "src": "contracts/compliance/modular/modules/TimeTransfersLimitsModule.sol:76",
        "version": {
          "withMetadata": "7c951c1646d40cac8ca102e970b03b23bc8cea77780967da96807825746e3325",
          "withoutMetadata": "4e37e5866c64964d6b7305228dc8749e7aa5192e0b4b8bf9dca593866432ef93",
          "linkedWithoutMetadata": "4e37e5866c64964d6b7305228dc8749e7aa5192e0b4b8bf9dca593866432ef93"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "batchSetTimeTransferLimit(struct TimeTransfersLimitsModule.Limit[])",
          "batchRemoveTimeTransferLimit(uint32[])",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "getTimeTransferLimits(address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "setTimeTransferLimit((uint32,uint256))",
          "removeTimeTransferLimit(uint32)",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "limitValues",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(IndexLimit)19968_storage))",
              "contract": "TimeTransfersLimitsModule",
              "src": "contracts/compliance/modular/modules/TimeTransfersLimitsModule.sol:94"
            },
            {
              "label": "transferLimits",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_struct(Limit)19963_storage)dyn_storage)",
              "contract": "TimeTransfersLimitsModule",
              "src": "contracts/compliance/modular/modules/TimeTransfersLimitsModule.sol:97"
            },
            {
              "label": "usersCounters",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_struct(TransferCounter)19958_storage)))",
              "contract": "TimeTransfersLimitsModule",
              "src": "contracts/compliance/modular/modules/TimeTransfersLimitsModule.sol:100"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Limit)19963_storage)dyn_storage": {
              "label": "struct TimeTransfersLimitsModule.Limit[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Limit)19963_storage)dyn_storage)": {
              "label": "mapping(address => struct TimeTransfersLimitsModule.Limit[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_struct(TransferCounter)19958_storage)))": {
              "label": "mapping(address => mapping(address => mapping(uint32 => struct TimeTransfersLimitsModule.TransferCounter)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(IndexLimit)19968_storage))": {
              "label": "mapping(address => mapping(uint32 => struct TimeTransfersLimitsModule.IndexLimit))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(TransferCounter)19958_storage))": {
              "label": "mapping(address => mapping(uint32 => struct TimeTransfersLimitsModule.TransferCounter))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(IndexLimit)19968_storage)": {
              "label": "mapping(uint32 => struct TimeTransfersLimitsModule.IndexLimit)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(TransferCounter)19958_storage)": {
              "label": "mapping(uint32 => struct TimeTransfersLimitsModule.TransferCounter)",
              "numberOfBytes": "32"
            },
            "t_struct(IndexLimit)19968_storage": {
              "label": "struct TimeTransfersLimitsModule.IndexLimit",
              "members": [
                {
                  "label": "attributedLimit",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "limitIndex",
                  "type": "t_uint8",
                  "offset": 1,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Limit)19963_storage": {
              "label": "struct TimeTransfersLimitsModule.Limit",
              "members": [
                {
                  "label": "limitTime",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "limitValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(TransferCounter)19958_storage": {
              "label": "struct TimeTransfersLimitsModule.TransferCounter",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "timer",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/TokenListingRestrictionsModule.sol:TokenListingRestrictionsModule": {
        "src": "contracts/compliance/modular/modules/TokenListingRestrictionsModule.sol:117",
        "version": {
          "withMetadata": "20019bd792e7f2028f6e0ac11ffa95c066eef2e535a1e1ed32d1c35a0188432c",
          "withoutMetadata": "efd5364e3ddddfc3e042561860d34368df2f76c4fd3e7714852717488835ae53",
          "linkedWithoutMetadata": "efd5364e3ddddfc3e042561860d34368df2f76c4fd3e7714852717488835ae53"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "configureToken(uint8)",
          "batchListTokens(address[],uint8)",
          "batchUnlistTokens(address[],uint8)",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "getTokenListingType(address)",
          "getInvestorListingStatus(address,address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "listToken(address,uint8)",
          "unlistToken(address,uint8)",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_tokenListingType",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_enum(ListingType)20695)",
              "contract": "TokenListingRestrictionsModule",
              "src": "contracts/compliance/modular/modules/TokenListingRestrictionsModule.sol:119"
            },
            {
              "label": "_tokenInvestorListingStatus",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "TokenListingRestrictionsModule",
              "src": "contracts/compliance/modular/modules/TokenListingRestrictionsModule.sol:123"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(ListingType)20695": {
              "label": "enum ListingType",
              "members": [
                "NOT_CONFIGURED",
                "WHITELISTING",
                "BLACKLISTING"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(ListingType)20695)": {
              "label": "mapping(address => enum ListingType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/TransferFeesModule.sol:TransferFeesModule": {
        "src": "contracts/compliance/modular/modules/TransferFeesModule.sol:76",
        "version": {
          "withMetadata": "c405147eabbc4493cf5e405d445a24a211c71ae9e74712664ee2cc604f28c77d",
          "withoutMetadata": "637716d7bc1f6975fcf1f88b671b43742f480f75f63d225ee4d0e17045e05479",
          "linkedWithoutMetadata": "637716d7bc1f6975fcf1f88b671b43742f480f75f63d225ee4d0e17045e05479"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setFee(uint256,address)",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "getFee(address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_fees",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_struct(Fee)21263_storage)",
              "contract": "TransferFeesModule",
              "src": "contracts/compliance/modular/modules/TransferFeesModule.sol:84"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Fee)21263_storage)": {
              "label": "mapping(address => struct TransferFeesModule.Fee)",
              "numberOfBytes": "32"
            },
            "t_struct(Fee)21263_storage": {
              "label": "struct TransferFeesModule.Fee",
              "members": [
                {
                  "label": "rate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collector",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/compliance/modular/modules/TransferRestrictModule.sol:TransferRestrictModule": {
        "src": "contracts/compliance/modular/modules/TransferRestrictModule.sol:73",
        "version": {
          "withMetadata": "a1650ae579448ead72b39f1554e0138a6b25b88c8bd752b6d84ff2d0c6b1b8a5",
          "withoutMetadata": "f7d03f620f2f1e2e30fd51481514cfc3ce86ddf444d7b7fab215f6c9ff23537e",
          "linkedWithoutMetadata": "f7d03f620f2f1e2e30fd51481514cfc3ce86ddf444d7b7fab215f6c9ff23537e"
        },
        "inherit": [
          "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol:AbstractModuleUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/compliance/modular/modules/IModule.sol:IModule"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "allowUser(address)",
          "batchAllowUsers(address[])",
          "disallowUser(address)",
          "batchDisallowUsers(address[])",
          "moduleTransferAction(address,address,uint256)",
          "moduleMintAction(address,uint256)",
          "moduleBurnAction(address,uint256)",
          "moduleCheck(address,address,uint256,address)",
          "isUserAllowed(address,address)",
          "canComplianceBind(address)",
          "isPlugAndPlay()",
          "name()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
            },
            {
              "label": "_allowedUserAddresses",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "TransferRestrictModule",
              "src": "contracts/compliance/modular/modules/TransferRestrictModule.sol:75"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/factory/ITREXFactory.sol:ITREXFactory": {
        "src": "contracts/factory/ITREXFactory.sol:64",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setImplementationAuthority(address)",
          "setIdFactory(address)",
          "deployTREXSuite(string,(address,string,string,uint8,address,address,address[],address[],address[],bytes[]),(uint256[],address[],uint256[][]))",
          "recoverContractOwnership(address,address)",
          "getImplementationAuthority()",
          "getIdFactory()",
          "getToken(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/factory/ITREXGateway.sol:ITREXGateway": {
        "src": "contracts/factory/ITREXGateway.sol:66",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "setPublicDeploymentStatus(bool)",
          "transferFactoryOwnership(address)",
          "enableDeploymentFee(bool)",
          "setDeploymentFee(uint256,address,address)",
          "addDeployer(address)",
          "batchAddDeployer(address[])",
          "removeDeployer(address)",
          "batchRemoveDeployer(address[])",
          "applyFeeDiscount(address,uint16)",
          "batchApplyFeeDiscount(address[],uint16[])",
          "deployTREXSuite((address,string,string,uint8,address,address,address[],address[],address[],bytes[]),(uint256[],address[],uint256[][]))",
          "batchDeployTREXSuite(struct ITREXFactory.TokenDetails[],struct ITREXFactory.ClaimDetails[])",
          "getPublicDeploymentStatus()",
          "getFactory()",
          "getDeploymentFee()",
          "isDeploymentFeeEnabled()",
          "isDeployer(address)",
          "calculateFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/factory/TREXFactory.sol:TREXFactory": {
        "src": "contracts/factory/TREXFactory.sol:82",
        "version": {
          "withMetadata": "b9f61e61dbe73d0f11bf8d4ce13eab6bc120b363608858c089a42c975c4d2dde",
          "withoutMetadata": "8de28393cd973cca5d0548032949d9ece03cbbacfc0d4c70fca810581ad955bc",
          "linkedWithoutMetadata": "8de28393cd973cca5d0548032949d9ece03cbbacfc0d4c70fca810581ad955bc"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/factory/ITREXFactory.sol:ITREXFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "deployTREXSuite(string,(address,string,string,uint8,address,address,address[],address[],address[],bytes[]),(uint256[],address[],uint256[][]))",
          "recoverContractOwnership(address,address)",
          "getImplementationAuthority()",
          "getIdFactory()",
          "getToken(string)",
          "setImplementationAuthority(address)",
          "setIdFactory(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TREXFactory",
            "src": "contracts/factory/TREXFactory.sol:94"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementationAuthority",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TREXFactory",
              "src": "contracts/factory/TREXFactory.sol:85"
            },
            {
              "label": "_idFactory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TREXFactory",
              "src": "contracts/factory/TREXFactory.sol:88"
            },
            {
              "label": "tokenDeployed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_string_memory_ptr,t_address)",
              "contract": "TREXFactory",
              "src": "contracts/factory/TREXFactory.sol:91"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/factory/TREXGateway.sol:TREXGateway": {
        "src": "contracts/factory/TREXGateway.sol:106",
        "version": {
          "withMetadata": "13905b20733860811ceda9b5f43f936ce6f14554b8f789c2ba84d61202379b99",
          "withoutMetadata": "d085a16a3ce1a83adef760bc70874e7e99a52b7556a3be12eabb90dcec3775ae",
          "linkedWithoutMetadata": "d085a16a3ce1a83adef760bc70874e7e99a52b7556a3be12eabb90dcec3775ae"
        },
        "inherit": [
          "contracts/roles/AgentRole.sol:AgentRole",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/factory/ITREXGateway.sol:ITREXGateway"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(address,bool)",
          "setFactory(address)",
          "setPublicDeploymentStatus(bool)",
          "transferFactoryOwnership(address)",
          "enableDeploymentFee(bool)",
          "setDeploymentFee(uint256,address,address)",
          "batchAddDeployer(address[])",
          "addDeployer(address)",
          "batchRemoveDeployer(address[])",
          "removeDeployer(address)",
          "batchApplyFeeDiscount(address[],uint16[])",
          "applyFeeDiscount(address,uint16)",
          "batchDeployTREXSuite(struct ITREXFactory.TokenDetails[],struct ITREXFactory.ClaimDetails[])",
          "getPublicDeploymentStatus()",
          "getFactory()",
          "getDeploymentFee()",
          "isDeploymentFeeEnabled()",
          "deployTREXSuite((address,string,string,uint8,address,address,address[],address[],address[],bytes[]),(uint256[],address[],uint256[][]))",
          "isDeployer(address)",
          "calculateFee(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TREXGateway",
            "src": "contracts/factory/TREXGateway.sol:128"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            },
            {
              "label": "_factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TREXGateway",
              "src": "contracts/factory/TREXGateway.sol:109"
            },
            {
              "label": "_publicDeploymentStatus",
              "offset": 20,
              "slot": "2",
              "type": "t_bool",
              "contract": "TREXGateway",
              "src": "contracts/factory/TREXGateway.sol:112"
            },
            {
              "label": "_deploymentFee",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Fee)22054_storage",
              "contract": "TREXGateway",
              "src": "contracts/factory/TREXGateway.sol:115"
            },
            {
              "label": "_deploymentFeeEnabled",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "TREXGateway",
              "src": "contracts/factory/TREXGateway.sol:118"
            },
            {
              "label": "_deployers",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TREXGateway",
              "src": "contracts/factory/TREXGateway.sol:121"
            },
            {
              "label": "_feeDiscount",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "TREXGateway",
              "src": "contracts/factory/TREXGateway.sol:124"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_struct(Fee)22054_storage": {
              "label": "struct ITREXGateway.Fee",
              "members": [
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "feeCollector",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/AbstractProxy.sol:AbstractProxy": {
        "src": "contracts/proxy/AbstractProxy.sol:69",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/proxy/interface/IProxy.sol:IProxy"
        ],
        "libraries": [],
        "methods": [
          "setImplementationAuthority(address)",
          "getImplementationAuthority()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/ClaimTopicsRegistryProxy.sol:ClaimTopicsRegistryProxy": {
        "src": "contracts/proxy/ClaimTopicsRegistryProxy.sol:67",
        "version": {
          "withMetadata": "4aaffc9e24da29d8360983bb60716311292af63fa4b14c1dec60046a989f7d4c",
          "withoutMetadata": "4aaffc9e24da29d8360983bb60716311292af63fa4b14c1dec60046a989f7d4c",
          "linkedWithoutMetadata": "4aaffc9e24da29d8360983bb60716311292af63fa4b14c1dec60046a989f7d4c"
        },
        "inherit": [
          "contracts/proxy/AbstractProxy.sol:AbstractProxy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/proxy/interface/IProxy.sol:IProxy"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClaimTopicsRegistryProxy",
            "src": "contracts/proxy/ClaimTopicsRegistryProxy.sol:69"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/ClaimTopicsRegistryProxy.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/IdentityRegistryProxy.sol:IdentityRegistryProxy": {
        "src": "contracts/proxy/IdentityRegistryProxy.sol:67",
        "version": {
          "withMetadata": "0e9e6b8621ff8587eaab5a215f3426f36298ca12907d473124df36e3685f23d6",
          "withoutMetadata": "0e9e6b8621ff8587eaab5a215f3426f36298ca12907d473124df36e3685f23d6",
          "linkedWithoutMetadata": "0e9e6b8621ff8587eaab5a215f3426f36298ca12907d473124df36e3685f23d6"
        },
        "inherit": [
          "contracts/proxy/AbstractProxy.sol:AbstractProxy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/proxy/interface/IProxy.sol:IProxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IdentityRegistryProxy",
            "src": "contracts/proxy/IdentityRegistryProxy.sol:69"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/IdentityRegistryProxy.sol:87"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/IdentityRegistryStorageProxy.sol:IdentityRegistryStorageProxy": {
        "src": "contracts/proxy/IdentityRegistryStorageProxy.sol:67",
        "version": {
          "withMetadata": "90b35dd1ae0242a208d2cd9edebe0d9872ec4b22a2afcff95fde5a624c0566ce",
          "withoutMetadata": "90b35dd1ae0242a208d2cd9edebe0d9872ec4b22a2afcff95fde5a624c0566ce",
          "linkedWithoutMetadata": "90b35dd1ae0242a208d2cd9edebe0d9872ec4b22a2afcff95fde5a624c0566ce"
        },
        "inherit": [
          "contracts/proxy/AbstractProxy.sol:AbstractProxy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/proxy/interface/IProxy.sol:IProxy"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IdentityRegistryStorageProxy",
            "src": "contracts/proxy/IdentityRegistryStorageProxy.sol:69"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/IdentityRegistryStorageProxy.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/ModularComplianceProxy.sol:ModularComplianceProxy": {
        "src": "contracts/proxy/ModularComplianceProxy.sol:67",
        "version": {
          "withMetadata": "cdc5f64d166c423f1727afc499e7b7bac5f90da4c7ea13e16be706486eb40a51",
          "withoutMetadata": "cdc5f64d166c423f1727afc499e7b7bac5f90da4c7ea13e16be706486eb40a51",
          "linkedWithoutMetadata": "cdc5f64d166c423f1727afc499e7b7bac5f90da4c7ea13e16be706486eb40a51"
        },
        "inherit": [
          "contracts/proxy/AbstractProxy.sol:AbstractProxy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/proxy/interface/IProxy.sol:IProxy"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ModularComplianceProxy",
            "src": "contracts/proxy/ModularComplianceProxy.sol:69"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/ModularComplianceProxy.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/TokenProxy.sol:TokenProxy": {
        "src": "contracts/proxy/TokenProxy.sol:67",
        "version": {
          "withMetadata": "1680ab0009d4007fec7e9ef45bf845970ff737415602c5ba149d5be8cc258190",
          "withoutMetadata": "1680ab0009d4007fec7e9ef45bf845970ff737415602c5ba149d5be8cc258190",
          "linkedWithoutMetadata": "1680ab0009d4007fec7e9ef45bf845970ff737415602c5ba149d5be8cc258190"
        },
        "inherit": [
          "contracts/proxy/AbstractProxy.sol:AbstractProxy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/proxy/interface/IProxy.sol:IProxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,string,string,uint8,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenProxy",
            "src": "contracts/proxy/TokenProxy.sol:69"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/TokenProxy.sol:95"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/TrustedIssuersRegistryProxy.sol:TrustedIssuersRegistryProxy": {
        "src": "contracts/proxy/TrustedIssuersRegistryProxy.sol:68",
        "version": {
          "withMetadata": "d35afdd2bc853050aa655913f72dcdd26b957c4063c72c05c0fe4e3d8dfbc5aa",
          "withoutMetadata": "d35afdd2bc853050aa655913f72dcdd26b957c4063c72c05c0fe4e3d8dfbc5aa",
          "linkedWithoutMetadata": "d35afdd2bc853050aa655913f72dcdd26b957c4063c72c05c0fe4e3d8dfbc5aa"
        },
        "inherit": [
          "contracts/proxy/AbstractProxy.sol:AbstractProxy",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/proxy/interface/IProxy.sol:IProxy"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TrustedIssuersRegistryProxy",
            "src": "contracts/proxy/TrustedIssuersRegistryProxy.sol:70"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/TrustedIssuersRegistryProxy.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/authority/IAFactory.sol:IAFactory": {
        "src": "contracts/proxy/authority/IAFactory.sol:67",
        "version": {
          "withMetadata": "5355011fcda46aef7b331fdd64ef5e41ae22eb6f285de5d5f9ee9062b32fb754",
          "withoutMetadata": "8a23bc13fdf31409d913b01872ed86cfe16215ae180a1ec4f2858338675165e2",
          "linkedWithoutMetadata": "8a23bc13fdf31409d913b01872ed86cfe16215ae180a1ec4f2858338675165e2"
        },
        "inherit": [
          "contracts/proxy/authority/IIAFactory.sol:IIAFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "deployIA(address)",
          "deployedByFactory(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IAFactory",
            "src": "contracts/proxy/authority/IAFactory.sol:79"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_trexFactory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "IAFactory",
              "src": "contracts/proxy/authority/IAFactory.sol:72"
            },
            {
              "label": "_deployedByFactory",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "IAFactory",
              "src": "contracts/proxy/authority/IAFactory.sol:75"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/authority/IIAFactory.sol:IIAFactory": {
        "src": "contracts/proxy/authority/IIAFactory.sol:64",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployIA(address)",
          "deployedByFactory(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/authority/ITREXImplementationAuthority.sol:ITREXImplementationAuthority": {
        "src": "contracts/proxy/authority/ITREXImplementationAuthority.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "fetchVersion((uint8,uint8,uint8))",
          "setTREXFactory(address)",
          "setIAFactory(address)",
          "addTREXVersion((uint8,uint8,uint8),(address,address,address,address,address,address))",
          "addAndUseTREXVersion((uint8,uint8,uint8),(address,address,address,address,address,address))",
          "useTREXVersion((uint8,uint8,uint8))",
          "changeImplementationAuthority(address,address)",
          "getCurrentVersion()",
          "getContracts((uint8,uint8,uint8))",
          "getTREXFactory()",
          "getTokenImplementation()",
          "getCTRImplementation()",
          "getIRImplementation()",
          "getIRSImplementation()",
          "getTIRImplementation()",
          "getMCImplementation()",
          "isReferenceContract()",
          "getReferenceContract()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/authority/TREXImplementationAuthority.sol:TREXImplementationAuthority": {
        "src": "contracts/proxy/authority/TREXImplementationAuthority.sol:72",
        "version": {
          "withMetadata": "173c9551a70a8cf95a34b825f6af3cfff8ba496a1eda8d1f3a0c40ba07bdb8cd",
          "withoutMetadata": "4a08daeebfbe373362fe221a1f844a55bedcc8b67b17202a0b9572a85d14fd1a",
          "linkedWithoutMetadata": "4a08daeebfbe373362fe221a1f844a55bedcc8b67b17202a0b9572a85d14fd1a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/proxy/authority/ITREXImplementationAuthority.sol:ITREXImplementationAuthority"
        ],
        "libraries": [],
        "methods": [
          "(bool,address,address)",
          "setTREXFactory(address)",
          "setIAFactory(address)",
          "addAndUseTREXVersion((uint8,uint8,uint8),(address,address,address,address,address,address))",
          "fetchVersion((uint8,uint8,uint8))",
          "changeImplementationAuthority(address,address)",
          "getCurrentVersion()",
          "getContracts((uint8,uint8,uint8))",
          "getTREXFactory()",
          "getTokenImplementation()",
          "getCTRImplementation()",
          "getIRImplementation()",
          "getIRSImplementation()",
          "getTIRImplementation()",
          "getMCImplementation()",
          "addTREXVersion((uint8,uint8,uint8),(address,address,address,address,address,address))",
          "useTREXVersion((uint8,uint8,uint8))",
          "isReferenceContract()",
          "getReferenceContract()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TREXImplementationAuthority",
            "src": "contracts/proxy/authority/TREXImplementationAuthority.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_currentVersion",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Version)25035_storage",
              "contract": "TREXImplementationAuthority",
              "src": "contracts/proxy/authority/TREXImplementationAuthority.sol:77"
            },
            {
              "label": "_contracts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(TREXContracts)25028_storage)",
              "contract": "TREXImplementationAuthority",
              "src": "contracts/proxy/authority/TREXImplementationAuthority.sol:80"
            },
            {
              "label": "_reference",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TREXImplementationAuthority",
              "src": "contracts/proxy/authority/TREXImplementationAuthority.sol:83"
            },
            {
              "label": "_trexFactory",
              "offset": 1,
              "slot": "3",
              "type": "t_address",
              "contract": "TREXImplementationAuthority",
              "src": "contracts/proxy/authority/TREXImplementationAuthority.sol:86"
            },
            {
              "label": "_iaFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "TREXImplementationAuthority",
              "src": "contracts/proxy/authority/TREXImplementationAuthority.sol:89"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TREXContracts)25028_storage)": {
              "label": "mapping(bytes32 => struct ITREXImplementationAuthority.TREXContracts)",
              "numberOfBytes": "32"
            },
            "t_struct(TREXContracts)25028_storage": {
              "label": "struct ITREXImplementationAuthority.TREXContracts",
              "members": [
                {
                  "label": "tokenImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ctrImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "irImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "irsImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "tirImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "mcImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Version)25035_storage": {
              "label": "struct ITREXImplementationAuthority.Version",
              "members": [
                {
                  "label": "major",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "minor",
                  "type": "t_uint8",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "patch",
                  "type": "t_uint8",
                  "offset": 2,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/proxy/interface/IProxy.sol:IProxy": {
        "src": "contracts/proxy/interface/IProxy.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setImplementationAuthority(address)",
          "getImplementationAuthority()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/implementation/ClaimTopicsRegistry.sol:ClaimTopicsRegistry": {
        "src": "contracts/registry/implementation/ClaimTopicsRegistry.sol:69",
        "version": {
          "withMetadata": "36e9e286187a7ab12101a757130f7c426f587a45c92baeb68b0907d5f05a0e70",
          "withoutMetadata": "f4ae44a5460d0f65600a1f6e9223276cf6383d24ae1a091d656d8fe270649f3a",
          "linkedWithoutMetadata": "f4ae44a5460d0f65600a1f6e9223276cf6383d24ae1a091d656d8fe270649f3a"
        },
        "inherit": [
          "contracts/registry/storage/CTRStorage.sol:CTRStorage",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/registry/interface/IClaimTopicsRegistry.sol:IClaimTopicsRegistry"
        ],
        "libraries": [],
        "methods": [
          "init()",
          "addClaimTopic(uint256)",
          "removeClaimTopic(uint256)",
          "getClaimTopics()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_claimTopics",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "CTRStorage",
              "src": "contracts/registry/storage/CTRStorage.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "CTRStorage",
              "src": "contracts/registry/storage/CTRStorage.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/implementation/IdentityRegistry.sol:IdentityRegistry": {
        "src": "contracts/registry/implementation/IdentityRegistry.sol:76",
        "version": {
          "withMetadata": "79b4bdcc395482ab5be6c97643d52ec8cee30e8efb862eb44d947b34616c8fa1",
          "withoutMetadata": "bc3a820564e538e203fc0fd280dbdacf241402387c63f68897b5d8910ac21792",
          "linkedWithoutMetadata": "bc3a820564e538e203fc0fd280dbdacf241402387c63f68897b5d8910ac21792"
        },
        "inherit": [
          "contracts/registry/storage/IRStorage.sol:IRStorage",
          "contracts/roles/AgentRoleUpgradeable.sol:AgentRoleUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/registry/interface/IIdentityRegistry.sol:IIdentityRegistry"
        ],
        "libraries": [],
        "methods": [
          "init(address,address,address)",
          "batchRegisterIdentity(address[],contract IIdentity[],uint16[])",
          "updateIdentity(address,address)",
          "updateCountry(address,uint16)",
          "deleteIdentity(address)",
          "setIdentityRegistryStorage(address)",
          "setClaimTopicsRegistry(address)",
          "setTrustedIssuersRegistry(address)",
          "isVerified(address)",
          "investorCountry(address)",
          "issuersRegistry()",
          "topicsRegistry()",
          "identityStorage()",
          "contains(address)",
          "registerIdentity(address,address,uint16)",
          "identity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoleUpgradeable",
              "src": "contracts/roles/AgentRoleUpgradeable.sol:73"
            },
            {
              "label": "_tokenTopicsRegistry",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(IClaimTopicsRegistry)27863",
              "contract": "IRStorage",
              "src": "contracts/registry/storage/IRStorage.sol:72"
            },
            {
              "label": "_tokenIssuersRegistry",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(ITrustedIssuersRegistry)28255",
              "contract": "IRStorage",
              "src": "contracts/registry/storage/IRStorage.sol:75"
            },
            {
              "label": "_tokenIdentityStorage",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IIdentityRegistryStorage)28154",
              "contract": "IRStorage",
              "src": "contracts/registry/storage/IRStorage.sol:78"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)49_storage",
              "contract": "IRStorage",
              "src": "contracts/registry/storage/IRStorage.sol:84"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IClaimTopicsRegistry)27863": {
              "label": "contract IClaimTopicsRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IIdentityRegistryStorage)28154": {
              "label": "contract IIdentityRegistryStorage",
              "numberOfBytes": "20"
            },
            "t_contract(ITrustedIssuersRegistry)28255": {
              "label": "contract ITrustedIssuersRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/implementation/IdentityRegistryStorage.sol:IdentityRegistryStorage": {
        "src": "contracts/registry/implementation/IdentityRegistryStorage.sol:71",
        "version": {
          "withMetadata": "356da520a0f81d9c82fed4d74ae9173be9512235ba6f985e631916756e4fb264",
          "withoutMetadata": "7544bde23c76442f80ddca594a56145c103049d30d50ce5997ff71d7f3b21226",
          "linkedWithoutMetadata": "7544bde23c76442f80ddca594a56145c103049d30d50ce5997ff71d7f3b21226"
        },
        "inherit": [
          "contracts/registry/storage/IRSStorage.sol:IRSStorage",
          "contracts/roles/AgentRoleUpgradeable.sol:AgentRoleUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/registry/interface/IIdentityRegistryStorage.sol:IIdentityRegistryStorage"
        ],
        "libraries": [],
        "methods": [
          "init()",
          "addIdentityToStorage(address,address,uint16)",
          "modifyStoredIdentity(address,address)",
          "modifyStoredInvestorCountry(address,uint16)",
          "removeIdentityFromStorage(address)",
          "bindIdentityRegistry(address)",
          "unbindIdentityRegistry(address)",
          "linkedIdentityRegistries()",
          "storedIdentity(address)",
          "storedInvestorCountry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoleUpgradeable",
              "src": "contracts/roles/AgentRoleUpgradeable.sol:73"
            },
            {
              "label": "_identities",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(Identity)28276_storage)",
              "contract": "IRSStorage",
              "src": "contracts/registry/storage/IRSStorage.sol:75"
            },
            {
              "label": "_identityRegistries",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_address)dyn_storage",
              "contract": "IRSStorage",
              "src": "contracts/registry/storage/IRSStorage.sol:78"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint256)49_storage",
              "contract": "IRSStorage",
              "src": "contracts/registry/storage/IRSStorage.sol:84"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IIdentity)1904": {
              "label": "contract IIdentity",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Identity)28276_storage)": {
              "label": "mapping(address => struct IRSStorage.Identity)",
              "numberOfBytes": "32"
            },
            "t_struct(Identity)28276_storage": {
              "label": "struct IRSStorage.Identity",
              "members": [
                {
                  "label": "identityContract",
                  "type": "t_contract(IIdentity)1904",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "investorCountry",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/implementation/TrustedIssuersRegistry.sol:TrustedIssuersRegistry": {
        "src": "contracts/registry/implementation/TrustedIssuersRegistry.sol:72",
        "version": {
          "withMetadata": "280d18b48c0e770e490bc670797734413c0fb33d5ef405f1c9470ae8de2ae88a",
          "withoutMetadata": "1a86b4812dc6f772582ff1ae56cef64b2012afd296bb8e532749c0ce703b96b9",
          "linkedWithoutMetadata": "1a86b4812dc6f772582ff1ae56cef64b2012afd296bb8e532749c0ce703b96b9"
        },
        "inherit": [
          "contracts/registry/storage/TIRStorage.sol:TIRStorage",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/registry/interface/ITrustedIssuersRegistry.sol:ITrustedIssuersRegistry"
        ],
        "libraries": [],
        "methods": [
          "init()",
          "addTrustedIssuer(address,uint256[])",
          "removeTrustedIssuer(address)",
          "updateIssuerClaimTopics(address,uint256[])",
          "getTrustedIssuers()",
          "getTrustedIssuersForClaimTopic(uint256)",
          "isTrustedIssuer(address)",
          "getTrustedIssuerClaimTopics(address)",
          "hasClaimTopic(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_trustedIssuers",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_contract(IClaimIssuer)1640)dyn_storage",
              "contract": "TIRStorage",
              "src": "contracts/registry/storage/TIRStorage.sol:70"
            },
            {
              "label": "_trustedIssuerClaimTopics",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "TIRStorage",
              "src": "contracts/registry/storage/TIRStorage.sol:73"
            },
            {
              "label": "_claimTopicsToTrustedIssuers",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_contract(IClaimIssuer)1640)dyn_storage)",
              "contract": "TIRStorage",
              "src": "contracts/registry/storage/TIRStorage.sol:76"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint256)49_storage",
              "contract": "TIRStorage",
              "src": "contracts/registry/storage/TIRStorage.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IClaimIssuer)1640)dyn_storage": {
              "label": "contract IClaimIssuer[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IClaimIssuer)1640": {
              "label": "contract IClaimIssuer",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_contract(IClaimIssuer)1640)dyn_storage)": {
              "label": "mapping(uint256 => contract IClaimIssuer[])",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/interface/IClaimTopicsRegistry.sol:IClaimTopicsRegistry": {
        "src": "contracts/registry/interface/IClaimTopicsRegistry.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addClaimTopic(uint256)",
          "removeClaimTopic(uint256)",
          "getClaimTopics()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/interface/IIdentityRegistry.sol:IIdentityRegistry": {
        "src": "contracts/registry/interface/IIdentityRegistry.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerIdentity(address,address,uint16)",
          "deleteIdentity(address)",
          "setIdentityRegistryStorage(address)",
          "setClaimTopicsRegistry(address)",
          "setTrustedIssuersRegistry(address)",
          "updateCountry(address,uint16)",
          "updateIdentity(address,address)",
          "batchRegisterIdentity(address[],contract IIdentity[],uint16[])",
          "contains(address)",
          "isVerified(address)",
          "identity(address)",
          "investorCountry(address)",
          "identityStorage()",
          "issuersRegistry()",
          "topicsRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/interface/IIdentityRegistryStorage.sol:IIdentityRegistryStorage": {
        "src": "contracts/registry/interface/IIdentityRegistryStorage.sol:67",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addIdentityToStorage(address,address,uint16)",
          "removeIdentityFromStorage(address)",
          "modifyStoredInvestorCountry(address,uint16)",
          "modifyStoredIdentity(address,address)",
          "bindIdentityRegistry(address)",
          "unbindIdentityRegistry(address)",
          "linkedIdentityRegistries()",
          "storedIdentity(address)",
          "storedInvestorCountry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/interface/ITrustedIssuersRegistry.sol:ITrustedIssuersRegistry": {
        "src": "contracts/registry/interface/ITrustedIssuersRegistry.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTrustedIssuer(address,uint256[])",
          "removeTrustedIssuer(address)",
          "updateIssuerClaimTopics(address,uint256[])",
          "getTrustedIssuers()",
          "getTrustedIssuersForClaimTopic(uint256)",
          "isTrustedIssuer(address)",
          "getTrustedIssuerClaimTopics(address)",
          "hasClaimTopic(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/storage/CTRStorage.sol:CTRStorage": {
        "src": "contracts/registry/storage/CTRStorage.sol:66",
        "version": {
          "withMetadata": "262ff32a3f0570459d86585b9411ad92ac1f432a92a9e9021088ffaba74cea5d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_claimTopics",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "CTRStorage",
              "src": "contracts/registry/storage/CTRStorage.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)49_storage",
              "contract": "CTRStorage",
              "src": "contracts/registry/storage/CTRStorage.sol:74"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/storage/IRSStorage.sol:IRSStorage": {
        "src": "contracts/registry/storage/IRSStorage.sol:68",
        "version": {
          "withMetadata": "069aac6a8d8b79b68746ef4aa1582338e3cdc72dacbf3bf79561c5ee28822c97",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_identities",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_struct(Identity)28276_storage)",
              "contract": "IRSStorage",
              "src": "contracts/registry/storage/IRSStorage.sol:75"
            },
            {
              "label": "_identityRegistries",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "IRSStorage",
              "src": "contracts/registry/storage/IRSStorage.sol:78"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "IRSStorage",
              "src": "contracts/registry/storage/IRSStorage.sol:84"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_contract(IIdentity)1904": {
              "label": "contract IIdentity",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Identity)28276_storage)": {
              "label": "mapping(address => struct IRSStorage.Identity)",
              "numberOfBytes": "32"
            },
            "t_struct(Identity)28276_storage": {
              "label": "struct IRSStorage.Identity",
              "members": [
                {
                  "label": "identityContract",
                  "type": "t_contract(IIdentity)1904",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "investorCountry",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/storage/IRStorage.sol:IRStorage": {
        "src": "contracts/registry/storage/IRStorage.sol:70",
        "version": {
          "withMetadata": "aa0b17442f3b7ad1b179f35bc74c0046149c6b7822d4c3e0f01baeb279939fa7",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_tokenTopicsRegistry",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IClaimTopicsRegistry)27863",
              "contract": "IRStorage",
              "src": "contracts/registry/storage/IRStorage.sol:72"
            },
            {
              "label": "_tokenIssuersRegistry",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(ITrustedIssuersRegistry)28255",
              "contract": "IRStorage",
              "src": "contracts/registry/storage/IRStorage.sol:75"
            },
            {
              "label": "_tokenIdentityStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IIdentityRegistryStorage)28154",
              "contract": "IRStorage",
              "src": "contracts/registry/storage/IRStorage.sol:78"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "IRStorage",
              "src": "contracts/registry/storage/IRStorage.sol:84"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_contract(IClaimTopicsRegistry)27863": {
              "label": "contract IClaimTopicsRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IIdentityRegistryStorage)28154": {
              "label": "contract IIdentityRegistryStorage",
              "numberOfBytes": "20"
            },
            "t_contract(ITrustedIssuersRegistry)28255": {
              "label": "contract ITrustedIssuersRegistry",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/registry/storage/TIRStorage.sol:TIRStorage": {
        "src": "contracts/registry/storage/TIRStorage.sol:68",
        "version": {
          "withMetadata": "749525a1cb18eb100314a2f051af2dd1e0bae005164f44d1450897fe580cbf97",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedIssuers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_contract(IClaimIssuer)1640)dyn_storage",
              "contract": "TIRStorage",
              "src": "contracts/registry/storage/TIRStorage.sol:70"
            },
            {
              "label": "_trustedIssuerClaimTopics",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "TIRStorage",
              "src": "contracts/registry/storage/TIRStorage.sol:73"
            },
            {
              "label": "_claimTopicsToTrustedIssuers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_array(t_contract(IClaimIssuer)1640)dyn_storage)",
              "contract": "TIRStorage",
              "src": "contracts/registry/storage/TIRStorage.sol:76"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "TIRStorage",
              "src": "contracts/registry/storage/TIRStorage.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IClaimIssuer)1640)dyn_storage": {
              "label": "contract IClaimIssuer[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(IClaimIssuer)1640": {
              "label": "contract IClaimIssuer",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_contract(IClaimIssuer)1640)dyn_storage)": {
              "label": "mapping(uint256 => contract IClaimIssuer[])",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/roles/AgentRole.sol:AgentRole": {
        "src": "contracts/roles/AgentRole.sol:70",
        "version": {
          "withMetadata": "c840384306a5dcd0ffe6f0438692343845c0ac24bc499f4c9b9d9eeb21206aac",
          "withoutMetadata": "5cd17bd8ad5d27c7671d7bd5afb68c983ff15ae91f70ce8eba4100a409a8e9bf",
          "linkedWithoutMetadata": "5cd17bd8ad5d27c7671d7bd5afb68c983ff15ae91f70ce8eba4100a409a8e9bf"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "contracts/roles/Roles.sol:Roles"
        ],
        "methods": [
          "addAgent(address)",
          "removeAgent(address)",
          "isAgent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRole",
              "src": "contracts/roles/AgentRole.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/roles/AgentRoleUpgradeable.sol:AgentRoleUpgradeable": {
        "src": "contracts/roles/AgentRoleUpgradeable.sol:70",
        "version": {
          "withMetadata": "aeee89e638136b8407363ffb113112634a2d42b7cbc53792be77a90f42b2fa20",
          "withoutMetadata": "2fbad1f4e18ec308650db34d31b6f63a459fc84048d098c2608b8912647d4c9e",
          "linkedWithoutMetadata": "2fbad1f4e18ec308650db34d31b6f63a459fc84048d098c2608b8912647d4c9e"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/roles/Roles.sol:Roles"
        ],
        "methods": [
          "addAgent(address)",
          "removeAgent(address)",
          "isAgent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoleUpgradeable",
              "src": "contracts/roles/AgentRoleUpgradeable.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/roles/Roles.sol:Roles": {
        "src": "contracts/roles/Roles.sol:70",
        "version": {
          "withMetadata": "f7d2268fb9851c5afd3c3e58f912c39dc157f840a1c97a522767f7cdf01fdd3b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/roles/permissioning/agent/AgentManager.sol:AgentManager": {
        "src": "contracts/roles/permissioning/agent/AgentManager.sol:72",
        "version": {
          "withMetadata": "6090be8378f465129b193da699db226333aefc6c630c023d845b1bef576ea9c6",
          "withoutMetadata": "34d284650e731da8a66d4c29011a08f5f859d8d2120d8092dedfd3c64e20c3f1",
          "linkedWithoutMetadata": "34d284650e731da8a66d4c29011a08f5f859d8d2120d8092dedfd3c64e20c3f1"
        },
        "inherit": [
          "contracts/roles/permissioning/agent/AgentRoles.sol:AgentRoles",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "callForcedTransfer(address,address,uint256,address)",
          "callBatchForcedTransfer(address[],address[],uint256[],address)",
          "callPause(address)",
          "callUnpause(address)",
          "callMint(address,uint256,address)",
          "callBatchMint(address[],uint256[],address)",
          "callBurn(address,uint256,address)",
          "callBatchBurn(address[],uint256[],address)",
          "callSetAddressFrozen(address,bool,address)",
          "callBatchSetAddressFrozen(address[],bool[],address)",
          "callFreezePartialTokens(address,uint256,address)",
          "callBatchFreezePartialTokens(address[],uint256[],address)",
          "callUnfreezePartialTokens(address,uint256,address)",
          "callBatchUnfreezePartialTokens(address[],uint256[],address)",
          "callRecoveryAddress(address,address,address,address)",
          "callRegisterIdentity(address,address,uint16,address)",
          "callUpdateIdentity(address,address,address)",
          "callUpdateCountry(address,uint16,address)",
          "callDeleteIdentity(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AgentManager",
            "src": "contracts/roles/permissioning/agent/AgentManager.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_supplyModifiers",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:75"
            },
            {
              "label": "_freezers",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:76"
            },
            {
              "label": "_transferManagers",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:77"
            },
            {
              "label": "_recoveryAgents",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:78"
            },
            {
              "label": "_complianceAgents",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:79"
            },
            {
              "label": "_whiteListManagers",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:80"
            },
            {
              "label": "_agentAdmin",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:81"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IToken)32473",
              "contract": "AgentManager",
              "src": "contracts/roles/permissioning/agent/AgentManager.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/roles/permissioning/agent/AgentRoles.sol:AgentRoles": {
        "src": "contracts/roles/permissioning/agent/AgentRoles.sol:70",
        "version": {
          "withMetadata": "d977514116f7601cb87bb430bd5abd919baf6442da909caf1b4f9a66021350de",
          "withoutMetadata": "667155de9cd13b7894c24368addbe107a2b2ca2fa100769e1338e0160f686f0b",
          "linkedWithoutMetadata": "667155de9cd13b7894c24368addbe107a2b2ca2fa100769e1338e0160f686f0b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "contracts/roles/Roles.sol:Roles"
        ],
        "methods": [
          "addAgentAdmin(address)",
          "removeAgentAdmin(address)",
          "addSupplyModifier(address)",
          "removeSupplyModifier(address)",
          "addFreezer(address)",
          "removeFreezer(address)",
          "addTransferManager(address)",
          "removeTransferManager(address)",
          "addRecoveryAgent(address)",
          "removeRecoveryAgent(address)",
          "addComplianceAgent(address)",
          "removeComplianceAgent(address)",
          "addWhiteListManager(address)",
          "removeWhiteListManager(address)",
          "isAgentAdmin(address)",
          "isWhiteListManager(address)",
          "isComplianceAgent(address)",
          "isRecoveryAgent(address)",
          "isTransferManager(address)",
          "isFreezer(address)",
          "isSupplyModifier(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_supplyModifiers",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:75"
            },
            {
              "label": "_freezers",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:76"
            },
            {
              "label": "_transferManagers",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:77"
            },
            {
              "label": "_recoveryAgents",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:78"
            },
            {
              "label": "_complianceAgents",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:79"
            },
            {
              "label": "_whiteListManagers",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:80"
            },
            {
              "label": "_agentAdmin",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoles",
              "src": "contracts/roles/permissioning/agent/AgentRoles.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol:AgentRolesUpgradeable": {
        "src": "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol:70",
        "version": {
          "withMetadata": "ea123b80d377f2921f6d0ddb1ad434f4d27062c0dead49029d80cd08aab3b173",
          "withoutMetadata": "73dc3a233af3662d54c7a94d2c3c5f6b57fdd489b09eed734576a90f0deea606",
          "linkedWithoutMetadata": "73dc3a233af3662d54c7a94d2c3c5f6b57fdd489b09eed734576a90f0deea606"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/roles/Roles.sol:Roles"
        ],
        "methods": [
          "addAgentAdmin(address)",
          "removeAgentAdmin(address)",
          "addSupplyModifier(address)",
          "removeSupplyModifier(address)",
          "addFreezer(address)",
          "removeFreezer(address)",
          "addTransferManager(address)",
          "removeTransferManager(address)",
          "addRecoveryAgent(address)",
          "removeRecoveryAgent(address)",
          "addComplianceAgent(address)",
          "removeComplianceAgent(address)",
          "addWhiteListManager(address)",
          "removeWhiteListManager(address)",
          "isAgentAdmin(address)",
          "isWhiteListManager(address)",
          "isComplianceAgent(address)",
          "isRecoveryAgent(address)",
          "isTransferManager(address)",
          "isFreezer(address)",
          "isSupplyModifier(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_supplyModifiers",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRolesUpgradeable",
              "src": "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol:77"
            },
            {
              "label": "_freezers",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRolesUpgradeable",
              "src": "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol:78"
            },
            {
              "label": "_transferManagers",
              "offset": 0,
              "slot": "103",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRolesUpgradeable",
              "src": "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol:79"
            },
            {
              "label": "_recoveryAgents",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRolesUpgradeable",
              "src": "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol:80"
            },
            {
              "label": "_complianceAgents",
              "offset": 0,
              "slot": "105",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRolesUpgradeable",
              "src": "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol:81"
            },
            {
              "label": "_whiteListManagers",
              "offset": 0,
              "slot": "106",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRolesUpgradeable",
              "src": "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol:82"
            },
            {
              "label": "_agentAdmin",
              "offset": 0,
              "slot": "107",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRolesUpgradeable",
              "src": "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol:83"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/roles/permissioning/owner/OwnerManager.sol:OwnerManager": {
        "src": "contracts/roles/permissioning/owner/OwnerManager.sol:76",
        "version": {
          "withMetadata": "bd2d601fb708da863eb03e0060c8b28961954d0f2dddabb6aea9f46ae87bbb40",
          "withoutMetadata": "4b508556425e07517e9410dc40e272dad8e72908e51eaea612f629426a845c00",
          "linkedWithoutMetadata": "4b508556425e07517e9410dc40e272dad8e72908e51eaea612f629426a845c00"
        },
        "inherit": [
          "contracts/roles/permissioning/owner/OwnerRoles.sol:OwnerRoles",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "callSetIdentityRegistry(address,address)",
          "callSetCompliance(address,address)",
          "callComplianceFunction(bytes,address)",
          "callSetTokenName(string,address)",
          "callSetTokenSymbol(string,address)",
          "callSetTokenOnchainID(address,address)",
          "callSetClaimTopicsRegistry(address,address)",
          "callSetTrustedIssuersRegistry(address,address)",
          "callAddTrustedIssuer(address,uint256[],address)",
          "callRemoveTrustedIssuer(address,address)",
          "callUpdateIssuerClaimTopics(address,uint256[],address)",
          "callAddClaimTopic(uint256,address)",
          "callRemoveClaimTopic(uint256,address)",
          "callTransferOwnershipOnTokenContract(address)",
          "callTransferOwnershipOnIdentityRegistryContract(address)",
          "callTransferOwnershipOnComplianceContract(address)",
          "callTransferOwnershipOnClaimTopicsRegistryContract(address)",
          "callTransferOwnershipOnIssuersRegistryContract(address)",
          "callAddAgentOnTokenContract(address)",
          "callRemoveAgentOnTokenContract(address)",
          "callAddAgentOnIdentityRegistryContract(address)",
          "callRemoveAgentOnIdentityRegistryContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OwnerManager",
            "src": "contracts/roles/permissioning/owner/OwnerManager.sol:92"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_ownerAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:75"
            },
            {
              "label": "_registryAddressSetter",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:76"
            },
            {
              "label": "_complianceSetter",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:77"
            },
            {
              "label": "_complianceManager",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:78"
            },
            {
              "label": "_claimRegistryManager",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:79"
            },
            {
              "label": "_issuersRegistryManager",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:80"
            },
            {
              "label": "_tokenInfoManager",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:81"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IToken)32473",
              "contract": "OwnerManager",
              "src": "contracts/roles/permissioning/owner/OwnerManager.sol:78"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IToken)32473": {
              "label": "contract IToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/roles/permissioning/owner/OwnerRoles.sol:OwnerRoles": {
        "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:70",
        "version": {
          "withMetadata": "647617b9c32e9c1cad5b280201db463d541a3738ca274a92091f5582e74a23af",
          "withoutMetadata": "dc0d8fe81294e13b7dcb1c641712665fd4828c4c8dac24b27aa0c6fbff61720e",
          "linkedWithoutMetadata": "dc0d8fe81294e13b7dcb1c641712665fd4828c4c8dac24b27aa0c6fbff61720e"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "contracts/roles/Roles.sol:Roles"
        ],
        "methods": [
          "addOwnerAdmin(address)",
          "removeOwnerAdmin(address)",
          "addRegistryAddressSetter(address)",
          "removeRegistryAddressSetter(address)",
          "addComplianceSetter(address)",
          "removeComplianceSetter(address)",
          "addComplianceManager(address)",
          "removeComplianceManager(address)",
          "addClaimRegistryManager(address)",
          "removeClaimRegistryManager(address)",
          "addIssuersRegistryManager(address)",
          "removeIssuersRegistryManager(address)",
          "addTokenInfoManager(address)",
          "removeTokenInfoManager(address)",
          "isOwnerAdmin(address)",
          "isTokenInfoManager(address)",
          "isIssuersRegistryManager(address)",
          "isClaimRegistryManager(address)",
          "isComplianceManager(address)",
          "isComplianceSetter(address)",
          "isRegistryAddressSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_ownerAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:75"
            },
            {
              "label": "_registryAddressSetter",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:76"
            },
            {
              "label": "_complianceSetter",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:77"
            },
            {
              "label": "_complianceManager",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:78"
            },
            {
              "label": "_claimRegistryManager",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:79"
            },
            {
              "label": "_issuersRegistryManager",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:80"
            },
            {
              "label": "_tokenInfoManager",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRoles",
              "src": "contracts/roles/permissioning/owner/OwnerRoles.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol:OwnerRolesUpgradeable": {
        "src": "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol:70",
        "version": {
          "withMetadata": "f0581b4ee0f7e203ac9f59b7b1ced25727fd420fe931df1f119b5d705719e528",
          "withoutMetadata": "ecc35bbcfc481fd9ec3c70036033b6d65e9b20f35634776df0abb2d3c10c37bc",
          "linkedWithoutMetadata": "ecc35bbcfc481fd9ec3c70036033b6d65e9b20f35634776df0abb2d3c10c37bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/roles/Roles.sol:Roles"
        ],
        "methods": [
          "addOwnerAdmin(address)",
          "removeOwnerAdmin(address)",
          "addRegistryAddressSetter(address)",
          "removeRegistryAddressSetter(address)",
          "addComplianceSetter(address)",
          "removeComplianceSetter(address)",
          "addComplianceManager(address)",
          "removeComplianceManager(address)",
          "addClaimRegistryManager(address)",
          "removeClaimRegistryManager(address)",
          "addIssuersRegistryManager(address)",
          "removeIssuersRegistryManager(address)",
          "addTokenInfoManager(address)",
          "removeTokenInfoManager(address)",
          "isOwnerAdmin(address)",
          "isTokenInfoManager(address)",
          "isIssuersRegistryManager(address)",
          "isClaimRegistryManager(address)",
          "isComplianceManager(address)",
          "isComplianceSetter(address)",
          "isRegistryAddressSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_ownerAdmin",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRolesUpgradeable",
              "src": "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol:77"
            },
            {
              "label": "_registryAddressSetter",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRolesUpgradeable",
              "src": "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol:78"
            },
            {
              "label": "_complianceSetter",
              "offset": 0,
              "slot": "103",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRolesUpgradeable",
              "src": "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol:79"
            },
            {
              "label": "_complianceManager",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRolesUpgradeable",
              "src": "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol:80"
            },
            {
              "label": "_claimRegistryManager",
              "offset": 0,
              "slot": "105",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRolesUpgradeable",
              "src": "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol:81"
            },
            {
              "label": "_issuersRegistryManager",
              "offset": 0,
              "slot": "106",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRolesUpgradeable",
              "src": "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol:82"
            },
            {
              "label": "_tokenInfoManager",
              "offset": 0,
              "slot": "107",
              "type": "t_struct(Role)28556_storage",
              "contract": "OwnerRolesUpgradeable",
              "src": "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol:83"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/token/IToken.sol:IToken": {
        "src": "contracts/token/IToken.sol:71",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "setName(string)",
          "setSymbol(string)",
          "setOnchainID(address)",
          "pause()",
          "unpause()",
          "setAddressFrozen(address,bool)",
          "freezePartialTokens(address,uint256)",
          "unfreezePartialTokens(address,uint256)",
          "setIdentityRegistry(address)",
          "setCompliance(address)",
          "forcedTransfer(address,address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "recoveryAddress(address,address,address)",
          "batchTransfer(address[],uint256[])",
          "batchForcedTransfer(address[],address[],uint256[])",
          "batchMint(address[],uint256[])",
          "batchBurn(address[],uint256[])",
          "batchSetAddressFrozen(address[],bool[])",
          "batchFreezePartialTokens(address[],uint256[])",
          "batchUnfreezePartialTokens(address[],uint256[])",
          "decimals()",
          "name()",
          "onchainID()",
          "symbol()",
          "version()",
          "identityRegistry()",
          "compliance()",
          "paused()",
          "isFrozen(address)",
          "getFrozenTokens(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/token/Token.sol:Token": {
        "src": "contracts/token/Token.sol:71",
        "version": {
          "withMetadata": "9b68b24fae9f7aabad6d2300971f42054fac1810d2aad0c6239af90625f2c258",
          "withoutMetadata": "c567034223aee536da1714e3dd860aecff6ae128358910771528df36db6af13e",
          "linkedWithoutMetadata": "c567034223aee536da1714e3dd860aecff6ae128358910771528df36db6af13e"
        },
        "inherit": [
          "contracts/token/TokenStorage.sol:TokenStorage",
          "contracts/roles/AgentRoleUpgradeable.sol:AgentRoleUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/token/IToken.sol:IToken",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "init(address,address,string,string,uint8,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "setName(string)",
          "setSymbol(string)",
          "setOnchainID(address)",
          "pause()",
          "unpause()",
          "batchTransfer(address[],uint256[])",
          "transferFrom(address,address,uint256)",
          "batchForcedTransfer(address[],address[],uint256[])",
          "batchMint(address[],uint256[])",
          "batchBurn(address[],uint256[])",
          "batchSetAddressFrozen(address[],bool[])",
          "batchFreezePartialTokens(address[],uint256[])",
          "batchUnfreezePartialTokens(address[],uint256[])",
          "recoveryAddress(address,address,address)",
          "totalSupply()",
          "allowance(address,address)",
          "identityRegistry()",
          "compliance()",
          "paused()",
          "isFrozen(address)",
          "getFrozenTokens(address)",
          "decimals()",
          "name()",
          "onchainID()",
          "symbol()",
          "version()",
          "transfer(address,uint256)",
          "forcedTransfer(address,address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "setAddressFrozen(address,bool)",
          "freezePartialTokens(address,uint256)",
          "unfreezePartialTokens(address,uint256)",
          "setIdentityRegistry(address)",
          "setCompliance(address)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_agents",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Role)28556_storage",
              "contract": "AgentRoleUpgradeable",
              "src": "contracts/roles/AgentRoleUpgradeable.sol:73"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:70"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:71"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "104",
              "type": "t_uint256",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:72"
            },
            {
              "label": "_tokenName",
              "offset": 0,
              "slot": "105",
              "type": "t_string_storage",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:75"
            },
            {
              "label": "_tokenSymbol",
              "offset": 0,
              "slot": "106",
              "type": "t_string_storage",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:76"
            },
            {
              "label": "_tokenDecimals",
              "offset": 0,
              "slot": "107",
              "type": "t_uint8",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:77"
            },
            {
              "label": "_tokenOnchainID",
              "offset": 1,
              "slot": "107",
              "type": "t_address",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:78"
            },
            {
              "label": "_frozen",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:82"
            },
            {
              "label": "_frozenTokens",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:83"
            },
            {
              "label": "_tokenPaused",
              "offset": 0,
              "slot": "110",
              "type": "t_bool",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:85"
            },
            {
              "label": "_tokenIdentityRegistry",
              "offset": 1,
              "slot": "110",
              "type": "t_contract(IIdentityRegistry)28038",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:88"
            },
            {
              "label": "_tokenCompliance",
              "offset": 0,
              "slot": "111",
              "type": "t_contract(IModularCompliance)15517",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:91"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "112",
              "type": "t_array(t_uint256)49_storage",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:97"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IIdentityRegistry)28038": {
              "label": "contract IIdentityRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IModularCompliance)15517": {
              "label": "contract IModularCompliance",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Role)28556_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      },
      "contracts/token/TokenStorage.sol:TokenStorage": {
        "src": "contracts/token/TokenStorage.sol:68",
        "version": {
          "withMetadata": "ed4ed91b746efa0a3fcb16eb06be1498b96878441abc36027296967fe1af082c",
          "withoutMetadata": "1b42486e1837f370f068314cc41c3f55138b528ffffae40f03e9a4207b3f91b8",
          "linkedWithoutMetadata": "1b42486e1837f370f068314cc41c3f55138b528ffffae40f03e9a4207b3f91b8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_tokenPaused",
            "src": "contracts/token/TokenStorage.sol:85"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:70"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:71"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:72"
            },
            {
              "label": "_tokenName",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:75"
            },
            {
              "label": "_tokenSymbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:76"
            },
            {
              "label": "_tokenDecimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:77"
            },
            {
              "label": "_tokenOnchainID",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:78"
            },
            {
              "label": "_frozen",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:82"
            },
            {
              "label": "_frozenTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:83"
            },
            {
              "label": "_tokenPaused",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:85"
            },
            {
              "label": "_tokenIdentityRegistry",
              "offset": 1,
              "slot": "8",
              "type": "t_contract(IIdentityRegistry)28038",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:88"
            },
            {
              "label": "_tokenCompliance",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IModularCompliance)15517",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:91"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_uint256)49_storage",
              "contract": "TokenStorage",
              "src": "contracts/token/TokenStorage.sol:97"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IIdentityRegistry)28038": {
              "label": "contract IIdentityRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IModularCompliance)15517": {
              "label": "contract IModularCompliance",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}