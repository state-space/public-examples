/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ITREXFactory {
  export type TokenDetailsStruct = {
    owner: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    irs: PromiseOrValue<string>;
    ONCHAINID: PromiseOrValue<string>;
    irAgents: PromiseOrValue<string>[];
    tokenAgents: PromiseOrValue<string>[];
    complianceModules: PromiseOrValue<string>[];
    complianceSettings: PromiseOrValue<BytesLike>[];
  };

  export type TokenDetailsStructOutput = [
    string,
    string,
    string,
    number,
    string,
    string,
    string[],
    string[],
    string[],
    string[]
  ] & {
    owner: string;
    name: string;
    symbol: string;
    decimals: number;
    irs: string;
    ONCHAINID: string;
    irAgents: string[];
    tokenAgents: string[];
    complianceModules: string[];
    complianceSettings: string[];
  };

  export type ClaimDetailsStruct = {
    claimTopics: PromiseOrValue<BigNumberish>[];
    issuers: PromiseOrValue<string>[];
    issuerClaims: PromiseOrValue<BigNumberish>[][];
  };

  export type ClaimDetailsStructOutput = [
    BigNumber[],
    string[],
    BigNumber[][]
  ] & {
    claimTopics: BigNumber[];
    issuers: string[];
    issuerClaims: BigNumber[][];
  };
}

export declare namespace ITREXGateway {
  export type FeeStruct = {
    fee: PromiseOrValue<BigNumberish>;
    feeToken: PromiseOrValue<string>;
    feeCollector: PromiseOrValue<string>;
  };

  export type FeeStructOutput = [BigNumber, string, string] & {
    fee: BigNumber;
    feeToken: string;
    feeCollector: string;
  };
}

export interface ITREXGatewayInterface extends utils.Interface {
  functions: {
    "addDeployer(address)": FunctionFragment;
    "applyFeeDiscount(address,uint16)": FunctionFragment;
    "batchAddDeployer(address[])": FunctionFragment;
    "batchApplyFeeDiscount(address[],uint16[])": FunctionFragment;
    "batchDeployTREXSuite((address,string,string,uint8,address,address,address[],address[],address[],bytes[])[],(uint256[],address[],uint256[][])[])": FunctionFragment;
    "batchRemoveDeployer(address[])": FunctionFragment;
    "calculateFee(address)": FunctionFragment;
    "deployTREXSuite((address,string,string,uint8,address,address,address[],address[],address[],bytes[]),(uint256[],address[],uint256[][]))": FunctionFragment;
    "enableDeploymentFee(bool)": FunctionFragment;
    "getDeploymentFee()": FunctionFragment;
    "getFactory()": FunctionFragment;
    "getPublicDeploymentStatus()": FunctionFragment;
    "isDeployer(address)": FunctionFragment;
    "isDeploymentFeeEnabled()": FunctionFragment;
    "removeDeployer(address)": FunctionFragment;
    "setDeploymentFee(uint256,address,address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setPublicDeploymentStatus(bool)": FunctionFragment;
    "transferFactoryOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDeployer"
      | "applyFeeDiscount"
      | "batchAddDeployer"
      | "batchApplyFeeDiscount"
      | "batchDeployTREXSuite"
      | "batchRemoveDeployer"
      | "calculateFee"
      | "deployTREXSuite"
      | "enableDeploymentFee"
      | "getDeploymentFee"
      | "getFactory"
      | "getPublicDeploymentStatus"
      | "isDeployer"
      | "isDeploymentFeeEnabled"
      | "removeDeployer"
      | "setDeploymentFee"
      | "setFactory"
      | "setPublicDeploymentStatus"
      | "transferFactoryOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDeployer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFeeDiscount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAddDeployer",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchApplyFeeDiscount",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDeployTREXSuite",
    values: [
      ITREXFactory.TokenDetailsStruct[],
      ITREXFactory.ClaimDetailsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRemoveDeployer",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTREXSuite",
    values: [ITREXFactory.TokenDetailsStruct, ITREXFactory.ClaimDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "enableDeploymentFee",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeploymentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicDeploymentStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeployer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeploymentFeeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDeployer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeploymentFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicDeploymentStatus",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFactoryOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFeeDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAddDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchApplyFeeDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDeployTREXSuite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRemoveDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTREXSuite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDeploymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeploymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPublicDeploymentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDeployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeploymentFeeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeploymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicDeploymentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFactoryOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DeployerAdded(address)": EventFragment;
    "DeployerRemoved(address)": EventFragment;
    "DeploymentFeeEnabled(bool)": EventFragment;
    "DeploymentFeeSet(uint256,address,address)": EventFragment;
    "FactorySet(address)": EventFragment;
    "FeeDiscountApplied(address,uint16)": EventFragment;
    "GatewaySuiteDeploymentProcessed(address,address,uint256)": EventFragment;
    "PublicDeploymentStatusSet(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploymentFeeEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploymentFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactorySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDiscountApplied"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GatewaySuiteDeploymentProcessed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicDeploymentStatusSet"): EventFragment;
}

export interface DeployerAddedEventObject {
  deployer: string;
}
export type DeployerAddedEvent = TypedEvent<[string], DeployerAddedEventObject>;

export type DeployerAddedEventFilter = TypedEventFilter<DeployerAddedEvent>;

export interface DeployerRemovedEventObject {
  deployer: string;
}
export type DeployerRemovedEvent = TypedEvent<
  [string],
  DeployerRemovedEventObject
>;

export type DeployerRemovedEventFilter = TypedEventFilter<DeployerRemovedEvent>;

export interface DeploymentFeeEnabledEventObject {
  isEnabled: boolean;
}
export type DeploymentFeeEnabledEvent = TypedEvent<
  [boolean],
  DeploymentFeeEnabledEventObject
>;

export type DeploymentFeeEnabledEventFilter =
  TypedEventFilter<DeploymentFeeEnabledEvent>;

export interface DeploymentFeeSetEventObject {
  fee: BigNumber;
  feeToken: string;
  feeCollector: string;
}
export type DeploymentFeeSetEvent = TypedEvent<
  [BigNumber, string, string],
  DeploymentFeeSetEventObject
>;

export type DeploymentFeeSetEventFilter =
  TypedEventFilter<DeploymentFeeSetEvent>;

export interface FactorySetEventObject {
  factory: string;
}
export type FactorySetEvent = TypedEvent<[string], FactorySetEventObject>;

export type FactorySetEventFilter = TypedEventFilter<FactorySetEvent>;

export interface FeeDiscountAppliedEventObject {
  deployer: string;
  discount: number;
}
export type FeeDiscountAppliedEvent = TypedEvent<
  [string, number],
  FeeDiscountAppliedEventObject
>;

export type FeeDiscountAppliedEventFilter =
  TypedEventFilter<FeeDiscountAppliedEvent>;

export interface GatewaySuiteDeploymentProcessedEventObject {
  requester: string;
  intendedOwner: string;
  feeApplied: BigNumber;
}
export type GatewaySuiteDeploymentProcessedEvent = TypedEvent<
  [string, string, BigNumber],
  GatewaySuiteDeploymentProcessedEventObject
>;

export type GatewaySuiteDeploymentProcessedEventFilter =
  TypedEventFilter<GatewaySuiteDeploymentProcessedEvent>;

export interface PublicDeploymentStatusSetEventObject {
  publicDeploymentStatus: boolean;
}
export type PublicDeploymentStatusSetEvent = TypedEvent<
  [boolean],
  PublicDeploymentStatusSetEventObject
>;

export type PublicDeploymentStatusSetEventFilter =
  TypedEventFilter<PublicDeploymentStatusSetEvent>;

export interface ITREXGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITREXGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyFeeDiscount(
      deployer: PromiseOrValue<string>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchAddDeployer(
      deployers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchApplyFeeDiscount(
      deployers: PromiseOrValue<string>[],
      discounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchDeployTREXSuite(
      _tokenDetails: ITREXFactory.TokenDetailsStruct[],
      _claimDetails: ITREXFactory.ClaimDetailsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchRemoveDeployer(
      deployers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateFee(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployTREXSuite(
      _tokenDetails: ITREXFactory.TokenDetailsStruct,
      _claimDetails: ITREXFactory.ClaimDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableDeploymentFee(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDeploymentFee(
      overrides?: CallOverrides
    ): Promise<[ITREXGateway.FeeStructOutput]>;

    getFactory(overrides?: CallOverrides): Promise<[string]>;

    getPublicDeploymentStatus(overrides?: CallOverrides): Promise<[boolean]>;

    isDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDeploymentFeeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    removeDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDeploymentFee(
      _fee: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPublicDeploymentStatus(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFactoryOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addDeployer(
    deployer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyFeeDiscount(
    deployer: PromiseOrValue<string>,
    discount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchAddDeployer(
    deployers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchApplyFeeDiscount(
    deployers: PromiseOrValue<string>[],
    discounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchDeployTREXSuite(
    _tokenDetails: ITREXFactory.TokenDetailsStruct[],
    _claimDetails: ITREXFactory.ClaimDetailsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchRemoveDeployer(
    deployers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateFee(
    deployer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployTREXSuite(
    _tokenDetails: ITREXFactory.TokenDetailsStruct,
    _claimDetails: ITREXFactory.ClaimDetailsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableDeploymentFee(
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDeploymentFee(
    overrides?: CallOverrides
  ): Promise<ITREXGateway.FeeStructOutput>;

  getFactory(overrides?: CallOverrides): Promise<string>;

  getPublicDeploymentStatus(overrides?: CallOverrides): Promise<boolean>;

  isDeployer(
    deployer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDeploymentFeeEnabled(overrides?: CallOverrides): Promise<boolean>;

  removeDeployer(
    deployer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDeploymentFee(
    _fee: PromiseOrValue<BigNumberish>,
    _feeToken: PromiseOrValue<string>,
    _feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPublicDeploymentStatus(
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFactoryOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    applyFeeDiscount(
      deployer: PromiseOrValue<string>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchAddDeployer(
      deployers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchApplyFeeDiscount(
      deployers: PromiseOrValue<string>[],
      discounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchDeployTREXSuite(
      _tokenDetails: ITREXFactory.TokenDetailsStruct[],
      _claimDetails: ITREXFactory.ClaimDetailsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchRemoveDeployer(
      deployers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculateFee(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployTREXSuite(
      _tokenDetails: ITREXFactory.TokenDetailsStruct,
      _claimDetails: ITREXFactory.ClaimDetailsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    enableDeploymentFee(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeploymentFee(
      overrides?: CallOverrides
    ): Promise<ITREXGateway.FeeStructOutput>;

    getFactory(overrides?: CallOverrides): Promise<string>;

    getPublicDeploymentStatus(overrides?: CallOverrides): Promise<boolean>;

    isDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDeploymentFeeEnabled(overrides?: CallOverrides): Promise<boolean>;

    removeDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeploymentFee(
      _fee: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicDeploymentStatus(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFactoryOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeployerAdded(address)"(
      deployer?: PromiseOrValue<string> | null
    ): DeployerAddedEventFilter;
    DeployerAdded(
      deployer?: PromiseOrValue<string> | null
    ): DeployerAddedEventFilter;

    "DeployerRemoved(address)"(
      deployer?: PromiseOrValue<string> | null
    ): DeployerRemovedEventFilter;
    DeployerRemoved(
      deployer?: PromiseOrValue<string> | null
    ): DeployerRemovedEventFilter;

    "DeploymentFeeEnabled(bool)"(
      isEnabled?: PromiseOrValue<boolean> | null
    ): DeploymentFeeEnabledEventFilter;
    DeploymentFeeEnabled(
      isEnabled?: PromiseOrValue<boolean> | null
    ): DeploymentFeeEnabledEventFilter;

    "DeploymentFeeSet(uint256,address,address)"(
      fee?: PromiseOrValue<BigNumberish> | null,
      feeToken?: PromiseOrValue<string> | null,
      feeCollector?: PromiseOrValue<string> | null
    ): DeploymentFeeSetEventFilter;
    DeploymentFeeSet(
      fee?: PromiseOrValue<BigNumberish> | null,
      feeToken?: PromiseOrValue<string> | null,
      feeCollector?: PromiseOrValue<string> | null
    ): DeploymentFeeSetEventFilter;

    "FactorySet(address)"(
      factory?: PromiseOrValue<string> | null
    ): FactorySetEventFilter;
    FactorySet(factory?: PromiseOrValue<string> | null): FactorySetEventFilter;

    "FeeDiscountApplied(address,uint16)"(
      deployer?: PromiseOrValue<string> | null,
      discount?: null
    ): FeeDiscountAppliedEventFilter;
    FeeDiscountApplied(
      deployer?: PromiseOrValue<string> | null,
      discount?: null
    ): FeeDiscountAppliedEventFilter;

    "GatewaySuiteDeploymentProcessed(address,address,uint256)"(
      requester?: PromiseOrValue<string> | null,
      intendedOwner?: null,
      feeApplied?: null
    ): GatewaySuiteDeploymentProcessedEventFilter;
    GatewaySuiteDeploymentProcessed(
      requester?: PromiseOrValue<string> | null,
      intendedOwner?: null,
      feeApplied?: null
    ): GatewaySuiteDeploymentProcessedEventFilter;

    "PublicDeploymentStatusSet(bool)"(
      publicDeploymentStatus?: PromiseOrValue<boolean> | null
    ): PublicDeploymentStatusSetEventFilter;
    PublicDeploymentStatusSet(
      publicDeploymentStatus?: PromiseOrValue<boolean> | null
    ): PublicDeploymentStatusSetEventFilter;
  };

  estimateGas: {
    addDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyFeeDiscount(
      deployer: PromiseOrValue<string>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchAddDeployer(
      deployers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchApplyFeeDiscount(
      deployers: PromiseOrValue<string>[],
      discounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchDeployTREXSuite(
      _tokenDetails: ITREXFactory.TokenDetailsStruct[],
      _claimDetails: ITREXFactory.ClaimDetailsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchRemoveDeployer(
      deployers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateFee(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployTREXSuite(
      _tokenDetails: ITREXFactory.TokenDetailsStruct,
      _claimDetails: ITREXFactory.ClaimDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableDeploymentFee(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDeploymentFee(overrides?: CallOverrides): Promise<BigNumber>;

    getFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicDeploymentStatus(overrides?: CallOverrides): Promise<BigNumber>;

    isDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDeploymentFeeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    removeDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDeploymentFee(
      _fee: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPublicDeploymentStatus(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFactoryOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyFeeDiscount(
      deployer: PromiseOrValue<string>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchAddDeployer(
      deployers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchApplyFeeDiscount(
      deployers: PromiseOrValue<string>[],
      discounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchDeployTREXSuite(
      _tokenDetails: ITREXFactory.TokenDetailsStruct[],
      _claimDetails: ITREXFactory.ClaimDetailsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchRemoveDeployer(
      deployers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateFee(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployTREXSuite(
      _tokenDetails: ITREXFactory.TokenDetailsStruct,
      _claimDetails: ITREXFactory.ClaimDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableDeploymentFee(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDeploymentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublicDeploymentStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeploymentFeeEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDeploymentFee(
      _fee: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPublicDeploymentStatus(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFactoryOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
