/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockContract,
  MockContractInterface,
} from "../../../contracts/_testContracts/MockContract";

const _abi = [
  {
    inputs: [],
    name: "identityRegistry",
    outputs: [
      {
        internalType: "address",
        name: "identityRegistry",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "investor",
        type: "address",
      },
    ],
    name: "investorCountry",
    outputs: [
      {
        internalType: "uint16",
        name: "country",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "country",
        type: "uint16",
      },
    ],
    name: "setInvestorCountry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610181806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063134e18f4146100465780637e42683b1461006b578063d8bdf4601461009e575b600080fd5b61004e6100d0565b6040516001600160a01b0390911681526020015b60405180910390f35b61008b6100793660046100f7565b50600054600160a01b900461ffff1690565b60405161ffff9091168152602001610062565b6100ce6100ac366004610127565b6000805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b005b600080546001600160a01b0316156100f257506000546001600160a01b031690565b503090565b60006020828403121561010957600080fd5b81356001600160a01b038116811461012057600080fd5b9392505050565b60006020828403121561013957600080fd5b813561ffff8116811461012057600080fdfea264697066735822122019ca002785385973adac63e486ac51210a97705592adf6a37940fd6ba4e7025464736f6c63430008110033";

type MockContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockContract__factory extends ContractFactory {
  constructor(...args: MockContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockContract> {
    return super.deploy(overrides || {}) as Promise<MockContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockContract {
    return super.attach(address) as MockContract;
  }
  override connect(signer: Signer): MockContract__factory {
    return super.connect(signer) as MockContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockContractInterface {
    return new utils.Interface(_abi) as MockContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockContract {
    return new Contract(address, _abi, signerOrProvider) as MockContract;
  }
}
