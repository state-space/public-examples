/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ClaimIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimIssuer__factory>;
    getContractFactory(
      name: "IIdFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdFactory__factory>;
    getContractFactory(
      name: "Identity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Identity__factory>;
    getContractFactory(
      name: "IClaimIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimIssuer__factory>;
    getContractFactory(
      name: "IERC734",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC734__factory>;
    getContractFactory(
      name: "IERC735",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC735__factory>;
    getContractFactory(
      name: "IIdentity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentity__factory>;
    getContractFactory(
      name: "IImplementationAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IImplementationAuthority__factory>;
    getContractFactory(
      name: "ImplementationAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImplementationAuthority__factory>;
    getContractFactory(
      name: "Version",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Version__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ClaimIssuerTrick",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimIssuerTrick__factory>;
    getContractFactory(
      name: "MockContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockContract__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestUpgradedCountryAllowModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUpgradedCountryAllowModule__factory>;
    getContractFactory(
      name: "LegacyIA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyIA__factory>;
    getContractFactory(
      name: "OwnableLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableLegacy__factory>;
    getContractFactory(
      name: "IImplementationAuthorityLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IImplementationAuthorityLegacy__factory>;
    getContractFactory(
      name: "LegacyProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyProxy__factory>;
    getContractFactory(
      name: "AgentRoleUpgradeableLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgentRoleUpgradeableLegacy__factory>;
    getContractFactory(
      name: "IClaimIssuerLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimIssuerLegacy__factory>;
    getContractFactory(
      name: "IClaimTopicsRegistryLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimTopicsRegistryLegacy__factory>;
    getContractFactory(
      name: "IComplianceLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComplianceLegacy__factory>;
    getContractFactory(
      name: "IERC20Legacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Legacy__factory>;
    getContractFactory(
      name: "IERC734Legacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC734Legacy__factory>;
    getContractFactory(
      name: "IERC735Legacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC735Legacy__factory>;
    getContractFactory(
      name: "IIdentityRegistryLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentityRegistryLegacy__factory>;
    getContractFactory(
      name: "IIdentityRegistryStorageLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentityRegistryStorageLegacy__factory>;
    getContractFactory(
      name: "ITokenLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenLegacy__factory>;
    getContractFactory(
      name: "ITrustedIssuersRegistryLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITrustedIssuersRegistryLegacy__factory>;
    getContractFactory(
      name: "LegacyIIdentity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyIIdentity__factory>;
    getContractFactory(
      name: "LegacyToken_3_5_2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyToken_3_5_2__factory>;
    getContractFactory(
      name: "OwnableUpgradeableLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeableLegacy__factory>;
    getContractFactory(
      name: "BasicCompliance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicCompliance__factory>;
    getContractFactory(
      name: "DefaultCompliance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultCompliance__factory>;
    getContractFactory(
      name: "ApproveTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApproveTransfer__factory>;
    getContractFactory(
      name: "CountryRestrictions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CountryRestrictions__factory>;
    getContractFactory(
      name: "CountryWhitelisting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CountryWhitelisting__factory>;
    getContractFactory(
      name: "DayMonthLimits",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DayMonthLimits__factory>;
    getContractFactory(
      name: "ExchangeMonthlyLimits",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExchangeMonthlyLimits__factory>;
    getContractFactory(
      name: "MaxBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaxBalance__factory>;
    getContractFactory(
      name: "SupplyLimit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupplyLimit__factory>;
    getContractFactory(
      name: "ICompliance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICompliance__factory>;
    getContractFactory(
      name: "ApproveTransferTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApproveTransferTest__factory>;
    getContractFactory(
      name: "CountryRestrictionsTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CountryRestrictionsTest__factory>;
    getContractFactory(
      name: "CountryWhitelistingTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CountryWhitelistingTest__factory>;
    getContractFactory(
      name: "DayMonthLimitsTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DayMonthLimitsTest__factory>;
    getContractFactory(
      name: "ExchangeMonthlyLimitsTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExchangeMonthlyLimitsTest__factory>;
    getContractFactory(
      name: "MaxBalanceTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaxBalanceTest__factory>;
    getContractFactory(
      name: "SupplyLimitTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupplyLimitTest__factory>;
    getContractFactory(
      name: "IModularCompliance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModularCompliance__factory>;
    getContractFactory(
      name: "ModularCompliance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModularCompliance__factory>;
    getContractFactory(
      name: "AbstractModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractModule__factory>;
    getContractFactory(
      name: "AbstractModuleUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractModuleUpgradeable__factory>;
    getContractFactory(
      name: "ConditionalTransferModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConditionalTransferModule__factory>;
    getContractFactory(
      name: "CountryAllowModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CountryAllowModule__factory>;
    getContractFactory(
      name: "CountryRestrictModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CountryRestrictModule__factory>;
    getContractFactory(
      name: "ExchangeMonthlyLimitsModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExchangeMonthlyLimitsModule__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "MaxBalanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaxBalanceModule__factory>;
    getContractFactory(
      name: "ModuleProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleProxy__factory>;
    getContractFactory(
      name: "SupplyLimitModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupplyLimitModule__factory>;
    getContractFactory(
      name: "TimeExchangeLimitsModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeExchangeLimitsModule__factory>;
    getContractFactory(
      name: "TimeTransfersLimitsModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeTransfersLimitsModule__factory>;
    getContractFactory(
      name: "TokenListingRestrictionsModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenListingRestrictionsModule__factory>;
    getContractFactory(
      name: "TransferFeesModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferFeesModule__factory>;
    getContractFactory(
      name: "TransferRestrictModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferRestrictModule__factory>;
    getContractFactory(
      name: "DVATransferManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DVATransferManager__factory>;
    getContractFactory(
      name: "IDVATransferManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDVATransferManager__factory>;
    getContractFactory(
      name: "DVDTransferManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DVDTransferManager__factory>;
    getContractFactory(
      name: "ITREXFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITREXFactory__factory>;
    getContractFactory(
      name: "ITREXGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITREXGateway__factory>;
    getContractFactory(
      name: "TREXFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TREXFactory__factory>;
    getContractFactory(
      name: "TREXGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TREXGateway__factory>;
    getContractFactory(
      name: "AbstractProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractProxy__factory>;
    getContractFactory(
      name: "IAFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAFactory__factory>;
    getContractFactory(
      name: "IIAFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIAFactory__factory>;
    getContractFactory(
      name: "ITREXImplementationAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITREXImplementationAuthority__factory>;
    getContractFactory(
      name: "TREXImplementationAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TREXImplementationAuthority__factory>;
    getContractFactory(
      name: "ClaimTopicsRegistryProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimTopicsRegistryProxy__factory>;
    getContractFactory(
      name: "IdentityRegistryProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentityRegistryProxy__factory>;
    getContractFactory(
      name: "IdentityRegistryStorageProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentityRegistryStorageProxy__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "ModularComplianceProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModularComplianceProxy__factory>;
    getContractFactory(
      name: "TokenProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenProxy__factory>;
    getContractFactory(
      name: "TrustedIssuersRegistryProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TrustedIssuersRegistryProxy__factory>;
    getContractFactory(
      name: "ClaimTopicsRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimTopicsRegistry__factory>;
    getContractFactory(
      name: "IdentityRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentityRegistry__factory>;
    getContractFactory(
      name: "IdentityRegistryStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentityRegistryStorage__factory>;
    getContractFactory(
      name: "TrustedIssuersRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TrustedIssuersRegistry__factory>;
    getContractFactory(
      name: "IClaimTopicsRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimTopicsRegistry__factory>;
    getContractFactory(
      name: "IIdentityRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentityRegistry__factory>;
    getContractFactory(
      name: "IIdentityRegistryStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentityRegistryStorage__factory>;
    getContractFactory(
      name: "ITrustedIssuersRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITrustedIssuersRegistry__factory>;
    getContractFactory(
      name: "AgentRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgentRole__factory>;
    getContractFactory(
      name: "AgentRoleUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgentRoleUpgradeable__factory>;
    getContractFactory(
      name: "AgentManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgentManager__factory>;
    getContractFactory(
      name: "AgentRoles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgentRoles__factory>;
    getContractFactory(
      name: "AgentRolesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgentRolesUpgradeable__factory>;
    getContractFactory(
      name: "OwnerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerManager__factory>;
    getContractFactory(
      name: "OwnerRoles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerRoles__factory>;
    getContractFactory(
      name: "OwnerRolesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerRolesUpgradeable__factory>;
    getContractFactory(
      name: "IToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IToken__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;

    getContractAt(
      name: "ClaimIssuer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimIssuer>;
    getContractAt(
      name: "IIdFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdFactory>;
    getContractAt(
      name: "Identity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Identity>;
    getContractAt(
      name: "IClaimIssuer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimIssuer>;
    getContractAt(
      name: "IERC734",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC734>;
    getContractAt(
      name: "IERC735",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC735>;
    getContractAt(
      name: "IIdentity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentity>;
    getContractAt(
      name: "IImplementationAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IImplementationAuthority>;
    getContractAt(
      name: "ImplementationAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImplementationAuthority>;
    getContractAt(
      name: "Version",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Version>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC1967Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ClaimIssuerTrick",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimIssuerTrick>;
    getContractAt(
      name: "MockContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockContract>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestUpgradedCountryAllowModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUpgradedCountryAllowModule>;
    getContractAt(
      name: "LegacyIA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyIA>;
    getContractAt(
      name: "OwnableLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableLegacy>;
    getContractAt(
      name: "IImplementationAuthorityLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IImplementationAuthorityLegacy>;
    getContractAt(
      name: "LegacyProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyProxy>;
    getContractAt(
      name: "AgentRoleUpgradeableLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgentRoleUpgradeableLegacy>;
    getContractAt(
      name: "IClaimIssuerLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimIssuerLegacy>;
    getContractAt(
      name: "IClaimTopicsRegistryLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimTopicsRegistryLegacy>;
    getContractAt(
      name: "IComplianceLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComplianceLegacy>;
    getContractAt(
      name: "IERC20Legacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Legacy>;
    getContractAt(
      name: "IERC734Legacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC734Legacy>;
    getContractAt(
      name: "IERC735Legacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC735Legacy>;
    getContractAt(
      name: "IIdentityRegistryLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentityRegistryLegacy>;
    getContractAt(
      name: "IIdentityRegistryStorageLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentityRegistryStorageLegacy>;
    getContractAt(
      name: "ITokenLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenLegacy>;
    getContractAt(
      name: "ITrustedIssuersRegistryLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITrustedIssuersRegistryLegacy>;
    getContractAt(
      name: "LegacyIIdentity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyIIdentity>;
    getContractAt(
      name: "LegacyToken_3_5_2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyToken_3_5_2>;
    getContractAt(
      name: "OwnableUpgradeableLegacy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeableLegacy>;
    getContractAt(
      name: "BasicCompliance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicCompliance>;
    getContractAt(
      name: "DefaultCompliance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultCompliance>;
    getContractAt(
      name: "ApproveTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApproveTransfer>;
    getContractAt(
      name: "CountryRestrictions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CountryRestrictions>;
    getContractAt(
      name: "CountryWhitelisting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CountryWhitelisting>;
    getContractAt(
      name: "DayMonthLimits",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DayMonthLimits>;
    getContractAt(
      name: "ExchangeMonthlyLimits",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExchangeMonthlyLimits>;
    getContractAt(
      name: "MaxBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaxBalance>;
    getContractAt(
      name: "SupplyLimit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SupplyLimit>;
    getContractAt(
      name: "ICompliance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICompliance>;
    getContractAt(
      name: "ApproveTransferTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApproveTransferTest>;
    getContractAt(
      name: "CountryRestrictionsTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CountryRestrictionsTest>;
    getContractAt(
      name: "CountryWhitelistingTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CountryWhitelistingTest>;
    getContractAt(
      name: "DayMonthLimitsTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DayMonthLimitsTest>;
    getContractAt(
      name: "ExchangeMonthlyLimitsTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExchangeMonthlyLimitsTest>;
    getContractAt(
      name: "MaxBalanceTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaxBalanceTest>;
    getContractAt(
      name: "SupplyLimitTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SupplyLimitTest>;
    getContractAt(
      name: "IModularCompliance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModularCompliance>;
    getContractAt(
      name: "ModularCompliance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModularCompliance>;
    getContractAt(
      name: "AbstractModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractModule>;
    getContractAt(
      name: "AbstractModuleUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractModuleUpgradeable>;
    getContractAt(
      name: "ConditionalTransferModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConditionalTransferModule>;
    getContractAt(
      name: "CountryAllowModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CountryAllowModule>;
    getContractAt(
      name: "CountryRestrictModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CountryRestrictModule>;
    getContractAt(
      name: "ExchangeMonthlyLimitsModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExchangeMonthlyLimitsModule>;
    getContractAt(
      name: "IModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "MaxBalanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaxBalanceModule>;
    getContractAt(
      name: "ModuleProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleProxy>;
    getContractAt(
      name: "SupplyLimitModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SupplyLimitModule>;
    getContractAt(
      name: "TimeExchangeLimitsModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimeExchangeLimitsModule>;
    getContractAt(
      name: "TimeTransfersLimitsModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimeTransfersLimitsModule>;
    getContractAt(
      name: "TokenListingRestrictionsModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenListingRestrictionsModule>;
    getContractAt(
      name: "TransferFeesModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferFeesModule>;
    getContractAt(
      name: "TransferRestrictModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferRestrictModule>;
    getContractAt(
      name: "DVATransferManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DVATransferManager>;
    getContractAt(
      name: "IDVATransferManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDVATransferManager>;
    getContractAt(
      name: "DVDTransferManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DVDTransferManager>;
    getContractAt(
      name: "ITREXFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITREXFactory>;
    getContractAt(
      name: "ITREXGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITREXGateway>;
    getContractAt(
      name: "TREXFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TREXFactory>;
    getContractAt(
      name: "TREXGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TREXGateway>;
    getContractAt(
      name: "AbstractProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractProxy>;
    getContractAt(
      name: "IAFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAFactory>;
    getContractAt(
      name: "IIAFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIAFactory>;
    getContractAt(
      name: "ITREXImplementationAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITREXImplementationAuthority>;
    getContractAt(
      name: "TREXImplementationAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TREXImplementationAuthority>;
    getContractAt(
      name: "ClaimTopicsRegistryProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimTopicsRegistryProxy>;
    getContractAt(
      name: "IdentityRegistryProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentityRegistryProxy>;
    getContractAt(
      name: "IdentityRegistryStorageProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentityRegistryStorageProxy>;
    getContractAt(
      name: "IProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "ModularComplianceProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModularComplianceProxy>;
    getContractAt(
      name: "TokenProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenProxy>;
    getContractAt(
      name: "TrustedIssuersRegistryProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TrustedIssuersRegistryProxy>;
    getContractAt(
      name: "ClaimTopicsRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimTopicsRegistry>;
    getContractAt(
      name: "IdentityRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentityRegistry>;
    getContractAt(
      name: "IdentityRegistryStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentityRegistryStorage>;
    getContractAt(
      name: "TrustedIssuersRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TrustedIssuersRegistry>;
    getContractAt(
      name: "IClaimTopicsRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimTopicsRegistry>;
    getContractAt(
      name: "IIdentityRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentityRegistry>;
    getContractAt(
      name: "IIdentityRegistryStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentityRegistryStorage>;
    getContractAt(
      name: "ITrustedIssuersRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITrustedIssuersRegistry>;
    getContractAt(
      name: "AgentRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgentRole>;
    getContractAt(
      name: "AgentRoleUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgentRoleUpgradeable>;
    getContractAt(
      name: "AgentManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgentManager>;
    getContractAt(
      name: "AgentRoles",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgentRoles>;
    getContractAt(
      name: "AgentRolesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgentRolesUpgradeable>;
    getContractAt(
      name: "OwnerManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerManager>;
    getContractAt(
      name: "OwnerRoles",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerRoles>;
    getContractAt(
      name: "OwnerRolesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerRolesUpgradeable>;
    getContractAt(
      name: "IToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IToken>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
